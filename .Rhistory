stdFilter[i] <- sd(filteredY[(i-lag):i])
}
return(list("signals"=signals,"avgFilter"=avgFilter,"stdFilter"=stdFilter))
}
y <- c(1,1,1.1,1,0.9,1,1,1.1,1,0.9,1,1.1,1,1,0.9,1,1,1.1,1,1,1,1,1.1,0.9,1,1.1,1,1,0.9,
1,1.1,1,1,1.1,1,0.8,0.9,1,1.2,0.9,1,1,1.1,1.2,1,1.5,1,3,2,5,3,2,1,1,1,0.9,1,1,3,
2.6,4,3,3.2,2,1,1,0.8,4,4,2,2.5,1,1,1)
lag       <- 30
threshold <- 5
influence <- 0
# Run algo with lag = 30, threshold = 5, influence = 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
View(y)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
View(y)
lag       <- 30
threshold <- 10
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 30
threshold <- 10
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 10
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 3
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 4
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 5
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 4
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 3.50
influence <- 0.30
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 3.50
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 3.50
influence <- 0.20
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 3.50
influence <- 0.10
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 3.50
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -1) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 3.50
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == 2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 3.50
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == 1) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 3.50
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
View(results)
View(results)
View(result)
View(results$signals)
View(result$signals)
ThresholdingAlgo <- function(y,lag,threshold,influence) {
signals <- rep(0,length(y))
filteredY <- y[0:lag]
avgFilter <- NULL
stdFilter <- NULL
avgFilter[lag] <- median(y[0:lag])
stdFilter[lag] <- sd(y[0:lag])
for (i in (lag+1):length(y)){
if (abs(y[i]-avgFilter[i-1]) > threshold*stdFilter[i-1]) {
if (y[i] > avgFilter[i-1]) {
signals[i] <- 1;
} else {
signals[i] <- -1;
}
filteredY[i] <- influence*y[i]+(1-influence)*filteredY[i-1]
} else {
signals[i] <- 0
filteredY[i] <- y[i]
}
avgFilter[i] <- median(filteredY[(i-lag):i])
stdFilter[i] <- sd(filteredY[(i-lag):i])
}
return(list("signals"=signals,"avgFilter"=avgFilter,"stdFilter"=stdFilter))
}
y <- workingdatatimecourseUnsmooth %>%
filter(heading == 1) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 3.50
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(quantmod)
library(ggplot2)
library(dplyr)
library(quantmod)
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages("quantmod")
library(ggplot2)
library(dplyr)
library(quantmod)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == 1) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
findpeaks(y)
library(ggplot2)
library(dplyr)
library(quantmod)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == 1) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
findPeaks(y)
lag       <- 5
threshold <- 3.50
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
library(ggplot2)
library(dplyr)
library(quantmod)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == 1) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
a <- findPeaks(y)
lag       <- 5
threshold <- 3.50
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
View(a)
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages("quantmod")
install.packages("Peaks")
install.packages("quantmod")
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(quantmod)
install.packages(Peaks)
b <- SpectrumBackground(y)
library(ggplot2)
library(dplyr)
library(quantmod)
library(Peaks)
install.packages("Peaks")
library(Peaks)
b <- SpectrumBackground(y)
library(ggplot2)
library(dplyr)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 5
threshold <- 3.50
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(frame) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = frame, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
# Write CSV in R
write.csv(y, file = "Minus2YawRateChange.csv")
knitr::opts_chunk$set(echo = TRUE)
# Wrapper to Gustav Model. Threshold vs. Accumulator. CDM. 03/06/17
# Aim is to test many radii and lateral offset to see if they produce different starting times.
# First step, compare across radii, sans noise, to see if the time to SWAction differentially changes across models.
# Get parameters from Gustav's best fit.
setwd("/PhD/Project/Experiment code/Accum vs Threshold") #### set directory where the rest of the .mat files and functions are
# Wrapper to Gustav Model. Threshold vs. Accumulator. CDM. 03/06/17
# Aim is to test many radii and lateral offset to see if they produce different starting times.
# First step, compare across radii, sans noise, to see if the time to SWAction differentially changes across models.
# Get parameters from Gustav's best fit.
setwd("M:/PhD/Project/Experiment_Code/Accum vs Threshold") #### set directory where the rest of the .mat files and functions are
# Wrapper to Gustav Model. Threshold vs. Accumulator. CDM. 03/06/17
# Aim is to test many radii and lateral offset to see if they produce different starting times.
# First step, compare across radii, sans noise, to see if the time to SWAction differentially changes across models.
# Get parameters from Gustav's best fit.
setwd("M:/PhD/Project/Experiment_Code/Accum_vs_Threshold") #### set directory where the rest of the .mat files and functions are
devtools::install_github("muschellij2/matlabr") # download matlabr functions
# Wrapper to Gustav Model. Threshold vs. Accumulator. CDM. 03/06/17
# Aim is to test many radii and lateral offset to see if they produce different starting times.
# First step, compare across radii, sans noise, to see if the time to SWAction differentially changes across models.
# Get parameters from Gustav's best fit.
setwd("M:/PhD/Project/Experiment_Code/Accum_vs_Threshold") #### set directory where the rest of the .mat files and functions are
install_github("muschellij2/matlabr") # download matlabr functions
# Wrapper to Gustav Model. Threshold vs. Accumulator. CDM. 03/06/17
# Aim is to test many radii and lateral offset to see if they produce different starting times.
# First step, compare across radii, sans noise, to see if the time to SWAction differentially changes across models.
# Get parameters from Gustav's best fit.
setwd("M:/PhD/Project/Experiment_Code/Accum_vs_Threshold") #### set directory where the rest of the .mat files and functions are
devtools::install_github("muschellij2/matlabr") # download matlabr functions
knitr::opts_chunk$set(echo = TRUE)
# Wrapper to Gustav Model. Threshold vs. Accumulator. CDM. 03/06/17
# Aim is to test many radii and lateral offset to see if they produce different starting times.
# First step, compare across radii, sans noise, to see if the time to SWAction differentially changes across models.
# Get parameters from Gustav's best fit.
setwd("M:/PhD/Project/Experiment_Code/Accum_vs_Threshold") #### set directory where the rest of the .mat files and functions are
devtools::install_github("muschellij2/matlabr") # download matlabr functions
# Wrapper to Gustav Model. Threshold vs. Accumulator. CDM. 03/06/17
# Aim is to test many radii and lateral offset to see if they produce different starting times.
# First step, compare across radii, sans noise, to see if the time to SWAction differentially changes across models.
# Get parameters from Gustav's best fit.
install.packages("devtools")
setwd("M:/PhD/Project/Experiment_Code/Accum_vs_Threshold") #### set directory where the rest of the .mat files and functions are
devtools::install_github("muschellij2/matlabr") # download matlabr functions
library(matlabr) # load the matlabr functions
options(matlab.path = "/ProgramData/Microsoft/Windows/Start Menu/Programs/MATLAB R2018a")
# create a path for matlab in order to use the utilities
have_matlab() #### If TRUE, matlab has been downloaded
devtools::install_github("muschellij2/matlabr")
install.packages(ggplot2)
install.packages(dplyr)
install.packages(tidyr)
install.packages(TTR)
install.packages(zoo)
install.packages(matlabr)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(tidyr)
install.packages(TTR)
install.packages(zoo)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(tidyr)
install.packages(TTR)
install.packages(zoo)
install.packages("matlabr")
install.packages("matlabr")
