ggplot(plus1, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = plus1mean$meanFirstSteeringTime) +
ggtitle("+1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## +2 heading ##########
plus2 <- workingdatatimecourse %>%
filter(heading == 2)
plus2mean <- workingdatathreshold %>%
filter(heading == 2) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(plus2, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = plus2mean$meanFirstSteeringTime) +
ggtitle("+2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
plus2mean
plus1mean
minus1mean
minus2mean
library(dplyr)
workingdatathreshold %>%
group_by(heading) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
# chooseCRANmirror(graphics=FALSE, ind=1) # uncomment for knitting
# rm(list = ls()) # clear workspace
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(tidyr)
install.packages(matlab)
install.packages(zoo)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
library(zoo)
library(dplyr)
library(tidyr)
# change in steering threshold
upperthreshold = 0.100 # 0.2184 # upper threshold for consistent steering response
lowerthreshold = 0.010 # lower threshold for when response initiated
YRchange <- workingdata$YawRate_seconds - c(0,workingdata$YawRate_seconds[-length(workingdata$YawRate_seconds)]) # calculating difference in yawrate
YRchange <- data.frame(YRchange) # convert yaw rate to dataframe
colnames(YRchange) <- c("YawRateChange") # change column names
workingdata <- cbind(workingdata, YRchange) # join dataframes
workingdata <- unite(workingdata, ppid_trialn, ppid, trialn, sep = "_") # create unique ppid_trialn ID
workingdatatimecourse <- workingdata %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) %>%
filter(anchored_timestamp<=min(anchored_timestamp)+4) %>%
ungroup() # create anchored timestamp and then only select first 4 seconds of data for each each ppid_trialn (only interested in the first steering adjustment as this point)
# determine first time in each ppid, trialn group above threshold
workingdatathreshold <- workingdatatimecourse %>%
group_by(ppid_trialn)%>%
mutate(row_number())%>% # added to verify selection
filter(max(abs(YawRateChange)) > upperthreshold, # filter largest yaw rate change greater than the upper threshold
min(abs(YawRateChange)) < lowerthreshold) %>% # filter lowest yaw rate change smaller than the lower theshold
slice(1:min(which(abs(YawRateChange) > upperthreshold))) %>%
slice(max(which(abs(YawRateChange) < lowerthreshold))) %>% # which() returns rows where a condition is true. Taking the min() of all the rows that are greater than the criteria will return the first row where that is true.
ungroup() %>%
transmute(ppid_trialn, heading, cameraoffset, SWAThres = SWA, FirstSteeringTime = anchored_timestamp, ThresWorld_x = World_x, ThresWorld_z = World_z, ThresWorldYaw = WorldYaw, ThresYawRate_seconds = YawRate_seconds, ThresYawRateChange = YawRateChange)
# Here SWA angle is redundent as it only takes the SWA for when the change in yaw rate is over the threshold... I'm interested in ThresYawRateChange (first change in yaw rate over threhsold) and FirstYawRateChangeTimeThres (first timestamp where yaw rate change is over threshold).
#Only thing extra would be to calculate frame rate (60 frames) (ask Richard), and then multiply by change in yaw rate to get yaw rate per second per second.
library(ggplot2)
library(dplyr)
# workingdatathreshold <- workingdatathreshold %>%
# filter(FirstSteeringTime < 1.5) # filter outliers
######## -2 heading ##########
minus2 <- workingdatatimecourse %>%
filter(heading == -2)
minus2mean <- workingdatathreshold %>%
filter(heading == -2) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(minus2, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = minus2mean$meanFirstSteeringTime) +
ggtitle("-2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## -1 heading ##########
minus1 <- workingdatatimecourse %>%
filter(heading == -1)
minus1mean <- workingdatathreshold %>%
filter(heading == -1) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(minus1, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = minus1mean$meanFirstSteeringTime) +
ggtitle("-1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## 0 heading ##########
zero <- workingdatatimecourse %>%
filter(heading == 0)
zeromean <- workingdatathreshold %>%
filter(heading == 0) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(zero, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = zeromean$meanFirstSteeringTime) +
ggtitle("0 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## +1 heading ##########
plus1 <- workingdatatimecourse %>%
filter(heading == 1)
plus1mean <- workingdatathreshold %>%
filter(heading == 1) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(plus1, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = plus1mean$meanFirstSteeringTime) +
ggtitle("+1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## +2 heading ##########
plus2 <- workingdatatimecourse %>%
filter(heading == 2)
plus2mean <- workingdatathreshold %>%
filter(heading == 2) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(plus2, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = plus2mean$meanFirstSteeringTime) +
ggtitle("+2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
library(dplyr)
workingdatathreshold %>%
group_by(heading) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
library(dplyr)
library(ggplot2)
ggplot(workingdatathreshold, aes(as.factor(heading), FirstSteeringTime)) +
geom_boxplot() +
ggtitle("First steering time across heading angles: boxplots") +
xlab("Heading angle (degrees)") +
ylab("Time until first steering correction (s)")
# chooseCRANmirror(graphics=FALSE, ind=1) # uncomment for knitting
# rm(list = ls()) # clear workspace
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(tidyr)
install.packages(matlab)
install.packages(zoo)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
library(zoo)
library(dplyr)
library(tidyr)
# change in steering threshold
upperthreshold = 0.105 # 0.2184 # upper threshold for consistent steering response
lowerthreshold = 0.010 # lower threshold for when response initiated
YRchange <- workingdata$YawRate_seconds - c(0,workingdata$YawRate_seconds[-length(workingdata$YawRate_seconds)]) # calculating difference in yawrate
YRchange <- data.frame(YRchange) # convert yaw rate to dataframe
colnames(YRchange) <- c("YawRateChange") # change column names
workingdata <- cbind(workingdata, YRchange) # join dataframes
workingdata <- unite(workingdata, ppid_trialn, ppid, trialn, sep = "_") # create unique ppid_trialn ID
workingdatatimecourse <- workingdata %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) %>%
filter(anchored_timestamp<=min(anchored_timestamp)+4) %>%
ungroup() # create anchored timestamp and then only select first 4 seconds of data for each each ppid_trialn (only interested in the first steering adjustment as this point)
# determine first time in each ppid, trialn group above threshold
workingdatathreshold <- workingdatatimecourse %>%
group_by(ppid_trialn)%>%
mutate(row_number())%>% # added to verify selection
filter(max(abs(YawRateChange)) > upperthreshold, # filter largest yaw rate change greater than the upper threshold
min(abs(YawRateChange)) < lowerthreshold) %>% # filter lowest yaw rate change smaller than the lower theshold
slice(1:min(which(abs(YawRateChange) > upperthreshold))) %>%
slice(max(which(abs(YawRateChange) < lowerthreshold))) %>% # which() returns rows where a condition is true. Taking the min() of all the rows that are greater than the criteria will return the first row where that is true.
ungroup() %>%
transmute(ppid_trialn, heading, cameraoffset, SWAThres = SWA, FirstSteeringTime = anchored_timestamp, ThresWorld_x = World_x, ThresWorld_z = World_z, ThresWorldYaw = WorldYaw, ThresYawRate_seconds = YawRate_seconds, ThresYawRateChange = YawRateChange)
# Here SWA angle is redundent as it only takes the SWA for when the change in yaw rate is over the threshold... I'm interested in ThresYawRateChange (first change in yaw rate over threhsold) and FirstYawRateChangeTimeThres (first timestamp where yaw rate change is over threshold).
#Only thing extra would be to calculate frame rate (60 frames) (ask Richard), and then multiply by change in yaw rate to get yaw rate per second per second.
library(zoo)
library(dplyr)
library(tidyr)
# change in steering threshold
upperthreshold = 0.25 # 0.2184 # upper threshold for consistent steering response
lowerthreshold = 0.010 # lower threshold for when response initiated
YRchange <- workingdata$YawRate_seconds - c(0,workingdata$YawRate_seconds[-length(workingdata$YawRate_seconds)]) # calculating difference in yawrate
YRchange <- data.frame(YRchange) # convert yaw rate to dataframe
colnames(YRchange) <- c("YawRateChange") # change column names
workingdata <- cbind(workingdata, YRchange) # join dataframes
workingdata <- unite(workingdata, ppid_trialn, ppid, trialn, sep = "_") # create unique ppid_trialn ID
# chooseCRANmirror(graphics=FALSE, ind=1) # uncomment for knitting
# rm(list = ls()) # clear workspace
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(tidyr)
install.packages(matlab)
install.packages(zoo)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
library(zoo)
library(dplyr)
library(tidyr)
# change in steering threshold
upperthreshold = 0.25 # 0.2184 # upper threshold for consistent steering response
lowerthreshold = 0.010 # lower threshold for when response initiated
YRchange <- workingdata$YawRate_seconds - c(0,workingdata$YawRate_seconds[-length(workingdata$YawRate_seconds)]) # calculating difference in yawrate
YRchange <- data.frame(YRchange) # convert yaw rate to dataframe
colnames(YRchange) <- c("YawRateChange") # change column names
workingdata <- cbind(workingdata, YRchange) # join dataframes
workingdata <- unite(workingdata, ppid_trialn, ppid, trialn, sep = "_") # create unique ppid_trialn ID
workingdatatimecourse <- workingdata %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) %>%
filter(anchored_timestamp<=min(anchored_timestamp)+4) %>%
ungroup() # create anchored timestamp and then only select first 4 seconds of data for each each ppid_trialn (only interested in the first steering adjustment as this point)
# determine first time in each ppid, trialn group above threshold
workingdatathreshold <- workingdatatimecourse %>%
group_by(ppid_trialn)%>%
mutate(row_number())%>% # added to verify selection
filter(max(abs(YawRateChange)) > upperthreshold, # filter largest yaw rate change greater than the upper threshold
min(abs(YawRateChange)) < lowerthreshold) %>% # filter lowest yaw rate change smaller than the lower theshold
slice(1:min(which(abs(YawRateChange) > upperthreshold))) %>%
slice(max(which(abs(YawRateChange) < lowerthreshold))) %>% # which() returns rows where a condition is true. Taking the min() of all the rows that are greater than the criteria will return the first row where that is true.
ungroup() %>%
transmute(ppid_trialn, heading, cameraoffset, SWAThres = SWA, FirstSteeringTime = anchored_timestamp, ThresWorld_x = World_x, ThresWorld_z = World_z, ThresWorldYaw = WorldYaw, ThresYawRate_seconds = YawRate_seconds, ThresYawRateChange = YawRateChange)
# Here SWA angle is redundent as it only takes the SWA for when the change in yaw rate is over the threshold... I'm interested in ThresYawRateChange (first change in yaw rate over threhsold) and FirstYawRateChangeTimeThres (first timestamp where yaw rate change is over threshold).
#Only thing extra would be to calculate frame rate (60 frames) (ask Richard), and then multiply by change in yaw rate to get yaw rate per second per second.
library(ggplot2)
library(dplyr)
# workingdatathreshold <- workingdatathreshold %>%
# filter(FirstSteeringTime < 1.5) # filter outliers
######## -2 heading ##########
minus2 <- workingdatatimecourse %>%
filter(heading == -2)
minus2mean <- workingdatathreshold %>%
filter(heading == -2) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(minus2, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = minus2mean$meanFirstSteeringTime) +
ggtitle("-2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## -1 heading ##########
minus1 <- workingdatatimecourse %>%
filter(heading == -1)
minus1mean <- workingdatathreshold %>%
filter(heading == -1) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(minus1, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = minus1mean$meanFirstSteeringTime) +
ggtitle("-1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## 0 heading ##########
zero <- workingdatatimecourse %>%
filter(heading == 0)
zeromean <- workingdatathreshold %>%
filter(heading == 0) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(zero, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = zeromean$meanFirstSteeringTime) +
ggtitle("0 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## +1 heading ##########
plus1 <- workingdatatimecourse %>%
filter(heading == 1)
plus1mean <- workingdatathreshold %>%
filter(heading == 1) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(plus1, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = plus1mean$meanFirstSteeringTime) +
ggtitle("+1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## +2 heading ##########
plus2 <- workingdatatimecourse %>%
filter(heading == 2)
plus2mean <- workingdatathreshold %>%
filter(heading == 2) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(plus2, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = plus2mean$meanFirstSteeringTime) +
ggtitle("+2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
library(dplyr)
library(ggplot2)
ggplot(workingdatathreshold, aes(as.factor(heading), FirstSteeringTime)) +
geom_boxplot() +
ggtitle("First steering time across heading angles: boxplots") +
xlab("Heading angle (degrees)") +
ylab("Time until first steering correction (s)")
# chooseCRANmirror(graphics=FALSE, ind=1) # uncomment for knitting
# rm(list = ls()) # clear workspace
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(tidyr)
install.packages(matlab)
install.packages(zoo)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
library(zoo)
library(dplyr)
library(tidyr)
# change in steering threshold
upperthreshold = 0.200 # 0.2184 # upper threshold for consistent steering response
lowerthreshold = 0.010 # lower threshold for when response initiated
YRchange <- workingdata$YawRate_seconds - c(0,workingdata$YawRate_seconds[-length(workingdata$YawRate_seconds)]) # calculating difference in yawrate
YRchange <- data.frame(YRchange) # convert yaw rate to dataframe
colnames(YRchange) <- c("YawRateChange") # change column names
workingdata <- cbind(workingdata, YRchange) # join dataframes
workingdata <- unite(workingdata, ppid_trialn, ppid, trialn, sep = "_") # create unique ppid_trialn ID
workingdatatimecourse <- workingdata %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) %>%
filter(anchored_timestamp<=min(anchored_timestamp)+4) %>%
ungroup() # create anchored timestamp and then only select first 4 seconds of data for each each ppid_trialn (only interested in the first steering adjustment as this point)
# determine first time in each ppid, trialn group above threshold
workingdatathreshold <- workingdatatimecourse %>%
group_by(ppid_trialn)%>%
mutate(row_number())%>% # added to verify selection
filter(max(abs(YawRateChange)) > upperthreshold, # filter largest yaw rate change greater than the upper threshold
min(abs(YawRateChange)) < lowerthreshold) %>% # filter lowest yaw rate change smaller than the lower theshold
slice(1:min(which(abs(YawRateChange) > upperthreshold))) %>%
slice(max(which(abs(YawRateChange) < lowerthreshold))) %>% # which() returns rows where a condition is true. Taking the min() of all the rows that are greater than the criteria will return the first row where that is true.
ungroup() %>%
transmute(ppid_trialn, heading, cameraoffset, SWAThres = SWA, FirstSteeringTime = anchored_timestamp, ThresWorld_x = World_x, ThresWorld_z = World_z, ThresWorldYaw = WorldYaw, ThresYawRate_seconds = YawRate_seconds, ThresYawRateChange = YawRateChange)
# Here SWA angle is redundent as it only takes the SWA for when the change in yaw rate is over the threshold... I'm interested in ThresYawRateChange (first change in yaw rate over threhsold) and FirstYawRateChangeTimeThres (first timestamp where yaw rate change is over threshold).
#Only thing extra would be to calculate frame rate (60 frames) (ask Richard), and then multiply by change in yaw rate to get yaw rate per second per second.
library(ggplot2)
library(dplyr)
# workingdatathreshold <- workingdatathreshold %>%
# filter(FirstSteeringTime < 1.5) # filter outliers
######## -2 heading ##########
minus2 <- workingdatatimecourse %>%
filter(heading == -2)
minus2mean <- workingdatathreshold %>%
filter(heading == -2) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(minus2, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = minus2mean$meanFirstSteeringTime) +
ggtitle("-2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## -1 heading ##########
minus1 <- workingdatatimecourse %>%
filter(heading == -1)
minus1mean <- workingdatathreshold %>%
filter(heading == -1) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(minus1, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = minus1mean$meanFirstSteeringTime) +
ggtitle("-1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## 0 heading ##########
zero <- workingdatatimecourse %>%
filter(heading == 0)
zeromean <- workingdatathreshold %>%
filter(heading == 0) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(zero, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = zeromean$meanFirstSteeringTime) +
ggtitle("0 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## +1 heading ##########
plus1 <- workingdatatimecourse %>%
filter(heading == 1)
plus1mean <- workingdatathreshold %>%
filter(heading == 1) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(plus1, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = plus1mean$meanFirstSteeringTime) +
ggtitle("+1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## +2 heading ##########
plus2 <- workingdatatimecourse %>%
filter(heading == 2)
plus2mean <- workingdatathreshold %>%
filter(heading == 2) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(plus2, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = plus2mean$meanFirstSteeringTime) +
ggtitle("+2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
library(dplyr)
library(ggplot2)
ggplot(workingdatathreshold, aes(as.factor(heading), FirstSteeringTime)) +
geom_boxplot() +
ggtitle("First steering time across heading angles: boxplots") +
xlab("Heading angle (degrees)") +
ylab("Time until first steering correction (s)")
# chooseCRANmirror(graphics=FALSE, ind=1) # uncomment for knitting
# rm(list = ls()) # clear workspace
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(tidyr)
install.packages(matlab)
install.packages(zoo)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
library(zoo)
library(dplyr)
library(tidyr)
# change in steering threshold
upperthreshold = 0.200 # 0.2184 # upper threshold for consistent steering response
lowerthreshold = 0.010 # lower threshold for when response initiated
YRchange <- workingdata$YawRate_seconds - c(0,workingdata$YawRate_seconds[-length(workingdata$YawRate_seconds)]) # calculating difference in yawrate
YRchange <- data.frame(YRchange) # convert yaw rate to dataframe
colnames(YRchange) <- c("YawRateChange") # change column names
workingdata <- cbind(workingdata, YRchange) # join dataframes
workingdata <- unite(workingdata, ppid_trialn, ppid, trialn, sep = "_") # create unique ppid_trialn ID
workingdatatimecourse <- workingdata %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) %>%
filter(anchored_timestamp<=min(anchored_timestamp)+4) %>%
ungroup() # create anchored timestamp and then only select first 4 seconds of data for each each ppid_trialn (only interested in the first steering adjustment as this point)
# determine first time in each ppid, trialn group above threshold
workingdatathreshold <- workingdatatimecourse %>%
group_by(ppid_trialn)%>%
mutate(row_number())%>% # added to verify selection
filter(max(abs(YawRateChange)) > upperthreshold, # filter largest yaw rate change greater than the upper threshold
min(abs(YawRateChange)) < lowerthreshold) %>% # filter lowest yaw rate change smaller than the lower theshold
slice(1:min(which(abs(YawRateChange) > upperthreshold))) %>%
slice(max(which(abs(YawRateChange) < lowerthreshold))) %>% # which() returns rows where a condition is true. Taking the min() of all the rows that are greater than the criteria will return the first row where that is true.
ungroup() %>%
transmute(ppid_trialn, heading, cameraoffset, SWAThres = SWA, FirstSteeringTime = anchored_timestamp, ThresWorld_x = World_x, ThresWorld_z = World_z, ThresWorldYaw = WorldYaw, ThresYawRate_seconds = YawRate_seconds, ThresYawRateChange = YawRateChange)
# Here SWA angle is redundent as it only takes the SWA for when the change in yaw rate is over the threshold... I'm interested in ThresYawRateChange (first change in yaw rate over threhsold) and FirstYawRateChangeTimeThres (first timestamp where yaw rate change is over threshold).
#Only thing extra would be to calculate frame rate (60 frames) (ask Richard), and then multiply by change in yaw rate to get yaw rate per second per second.
library(ggplot2)
library(dplyr)
workingdatathreshold <- workingdatathreshold %>%
filter(FirstSteeringTime < 1.25) # filter outliers
######## -2 heading ##########
minus2 <- workingdatatimecourse %>%
filter(heading == -2)
minus2mean <- workingdatathreshold %>%
filter(heading == -2) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(minus2, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = minus2mean$meanFirstSteeringTime) +
ggtitle("-2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## -1 heading ##########
minus1 <- workingdatatimecourse %>%
filter(heading == -1)
minus1mean <- workingdatathreshold %>%
filter(heading == -1) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(minus1, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = minus1mean$meanFirstSteeringTime) +
ggtitle("-1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## 0 heading ##########
zero <- workingdatatimecourse %>%
filter(heading == 0)
zeromean <- workingdatathreshold %>%
filter(heading == 0) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(zero, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = zeromean$meanFirstSteeringTime) +
ggtitle("0 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## +1 heading ##########
plus1 <- workingdatatimecourse %>%
filter(heading == 1)
plus1mean <- workingdatathreshold %>%
filter(heading == 1) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(plus1, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = plus1mean$meanFirstSteeringTime) +
ggtitle("+1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
######## +2 heading ##########
plus2 <- workingdatatimecourse %>%
filter(heading == 2)
plus2mean <- workingdatathreshold %>%
filter(heading == 2) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
ggplot(plus2, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
geom_vline(xintercept = plus2mean$meanFirstSteeringTime) +
ggtitle("+2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
library(dplyr)
workingdatathreshold %>%
group_by(heading) %>%
summarise(meanFirstSteeringTime = mean(FirstSteeringTime, na.rm = TRUE))
library(dplyr)
library(ggplot2)
ggplot(workingdatathreshold, aes(as.factor(heading), FirstSteeringTime)) +
geom_boxplot() +
ggtitle("First steering time across heading angles: boxplots") +
xlab("Heading angle (degrees)") +
ylab("Time until first steering correction (s)")
