hazard_fn <- function(t){.8*t}
# Graph S(t), the survival function derived from h(t)
y <- apply_survival_function(t, hazard_fn, supplied_fn_type="h", fn_type_to_apply="S")
plot(jitter(magnitudedata$heading), magnitudedata$FirstSteeringTime)
lines(x=t, y=y, xlim=c(0, max(t)), ylim=c(0, max(y)), main="S(t)", ylab="Survival Probability", type="l")
# Define time points at which to plot
t <- seq(0, 2, 0.5)
# Define h(t), the hazard function
hazard_fn <- function(t){2*t}
# Graph S(t), the survival function derived from h(t)
y <- apply_survival_function(t, hazard_fn, supplied_fn_type="h", fn_type_to_apply="S")
plot(jitter(magnitudedata$heading), magnitudedata$FirstSteeringTime)
lines(x=t, y=y, xlim=c(0, max(t)), ylim=c(0, max(y)), main="S(t)", ylab="Survival Probability", type="l")
# Define time points at which to plot
t <- seq(0, 2, 0.5)
# Define h(t), the hazard function
hazard_fn <- function(t){1.5*t}
# Graph S(t), the survival function derived from h(t)
y <- apply_survival_function(t, hazard_fn, supplied_fn_type="h", fn_type_to_apply="S")
plot(jitter(magnitudedata$heading), magnitudedata$FirstSteeringTime)
lines(x=t, y=y, xlim=c(0, max(t)), ylim=c(0, max(y)), main="S(t)", ylab="Survival Probability", type="l")
# Define time points at which to plot
t <- seq(0, 2, 0.5)
# Define h(t), the hazard function
hazard_fn <- function(t){1.5*t}
# Graph S(t), the survival function derived from h(t)
y <- apply_survival_function(t, hazard_fn, supplied_fn_type="h", fn_type_to_apply="S")
plot(jitter(magnitudedata$heading), magnitudedata$FirstSteeringTime)
lines(x=t, y=y, xlim=c(0, max(t)), ylim=c(0, max(y)), main="S(t)", ylab="Survival Probability", type="l")
start_ll <- 1e+06
start_ll
library(rtdists)
library(dplyr)   # for data manipulations and looping
library(tidyr)   # for data manipulations
library(purrr)   # for data manipulations
library(lattice) # for plotting and corresponding themes
library(latticeExtra)
library(binom)  # for binomial confidence intervals
lattice.options(default.theme = standard.theme(color = FALSE))
lattice.options(default.args = list(as.table = TRUE))
options(digits = 3)
library(conflicted)
conflict_prefer("filter", "dplyr")
rm(list = ls())
# rm(list = ls())
# load data
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/Straights") # set working directory
# setwd("C:/Users/Courtney/Documents/PhD/Project/Experiment_code/Straights")
temp = list.files(pattern = c("dat2", "*.csv")) # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
dat2 <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
View(dat2)
# heading variable out into "bins" from 1 to 5, 1 being 0 degree offset and 5 being 2 degree offset
dat2 <- dat2[sample(nrow(dat2)),]
d_nested <- dat2 %>%
group_by(pNum) %>% # we loop across both, id and instruction
nest()
d_nested
d_nested %>%
objective_diffusion_separate(start,
rt = data$FirstSteeringTime, response = data$response_num,
drift = factor(data$heading, seq_len(n_drift))))
d_nested %>%
objective_diffusion_separate(start, rt = data$FirstSteeringTime, response = data$response_num, drift = factor(data$heading, seq_len(n_drift)))
# objective function for diffusion with 1 a. loops over drift to assign drift rates to strength
objective_diffusion_separate <- function(pars, rt, response, drift, ...) {
non_v_pars <- grep("^v", names(pars), invert = TRUE, value = TRUE)
base_par <- length(non_v_pars)  # number of non-drift parameters
densities <- vector("numeric", length(rt))
for (i in seq_along(levels(drift))) {
densities[drift == levels(drift)[i]] <-
ddiffusion(rt[drift == levels(drift)[i]], response=response[drift == levels(drift)[i]],
a=pars["a"], t0=pars["t0"],
sv=pars["sv"],
sz=if ("sz" %in% non_v_pars) pars["sz"] else 0.1,
z=if ("z" %in% non_v_pars) pars["z"]*pars["a"] else 0.5*pars["a"],
st0=if ("st0" %in% non_v_pars) pars["st0"] else 0,
v=pars[base_par+i])
}
if (any(densities == 0)) return(1e6)
return(-sum(log(densities)))
}
# function that creates random start values
get_start <- function(base_par, n_drift = 5) {
start1 <- c(
a = runif(1, 0.5, 3),
a_1 = runif(1, 0.5, 3),
a_2 = runif(1, 0.5, 3),
t0 = runif(1, 0, 0.5),
z = runif(1, 0.4, 0.6),
sz = runif(1, 0, 0.5),
sv = runif(1, 0, 0.5),
st0 = runif(1, 0, 0.5),
d = rnorm(1, 0, 0.05)
)
start2 <- sort(rnorm(n_drift), decreasing = FALSE)
names(start2) <- paste0("v_", seq_len(n_drift))
c(start1[base_par], start2)
}
# function that tries different random start values until it works:
ensure_fit <-
function(data, start_function, objective_function,
base_pars, n_drift = 5, n_fits = 1,
lower = c(rep(0, length(base_pars)), -Inf,
rep(-Inf,length(start_function(base_pars))-length(base_pars)))) {
best_fit <- list(objective = 1e+06)
for (i in seq_len(n_fits)) {
start_ll <- 1e+06
#browser()
while(start_ll == 1e+06) {
start <- start_function(base_pars, n_drift=n_drift)
start_ll <- objective_function(start,
rt = data$FirstSteeringTime, response = data$response_num,
drift = factor(data$heading, seq_len(n_drift)))
}
cat("\nstart fitting.\n") # just for information to see if it is stuck
fit <- nlminb(start, objective_function,
rt = data$FirstSteeringTime, response = data$response_num,
drift = factor(data$heading, seq_len(n_drift)),
lower = lower)
if (fit$objective < best_fit$objective) best_fit <- fit
}
out <- as.data.frame(t(unlist(best_fit[1:3])))
colnames(out) <- sub("par.", "", colnames(out))
out
}
d_nested %>%
objective_diffusion_separate(start, rt = data$FirstSteeringTime, response = data$response_num, drift = factor(data$heading, seq_len(n_drift)))
d_nested %>%
data$FirstSteeringTime
dat2 %>%
objective_diffusion_separate(start, rt = dat2$FirstSteeringTime, response = dat2$response_num, drift = factor(dat2$heading, seq_len(n_drift)))
n_drift = 5
dat2 %>%
objective_diffusion_separate(start, rt = dat2$FirstSteeringTime, response = dat2$response_num, drift = factor(dat2$heading, seq_len(n_drift)))
a = runif(1, 0.5, 3),
a = runif(1, 0.5, 3)
a
library(rtdists)
library(brms)
install.packages("brms")
library(brms)
data(speed_acc, package = "rtdists")
speed_acc <- droplevels(speed_acc[!speed_acc$censor,]) # remove extreme RTs
speed_acc <- droplevels(speed_acc[ speed_acc$frequency %in%
c("high", "nw_high"),])
speed_acc$response2 <- as.numeric(speed_acc$response)-1
str(speed_acc)
View(speed_acc)
formula <- bf(rt | dec(response2) ~ 0 + frequency +
(0 + frequency|p|id),
bs ~ 0 + frequency + (0 + frequency|p|id),
ndt ~ 0 + frequency + (0 + frequency|p|id),
bias ~ 0 + frequency + (0 + frequency|p|id))
formula
rm(list = ls())
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/Straights") # set working directory
# setwd("C:/Users/Courtney/Documents/PhD/Project/Experiment_code/Straights")
temp = list.files(pattern = c("dat2", "*.csv")) # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
dat2 <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
library(brms)
library(rtdists)
rm(list = ls())
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/Straights") # set working directory
# setwd("C:/Users/Courtney/Documents/PhD/Project/Experiment_code/Straights")
temp = list.files(pattern = c("dat2", "*.csv")) # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
dat2 <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
View(dat2)
nosteer <- dat2 %>%
filter(response == "nosteer") %>%
mutate(response = 0)
View(nosteer)
nosteer <- dat2 %>%
filter(response == "nosteer") %>%
mutate(response_num = 0)
View(nosteer)
steer <- dat2 %>%
filter(response == "steer") %>%
mutate(response_num = 1)
View(steer)
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/Straights") # set working directory
# setwd("C:/Users/Courtney/Documents/PhD/Project/Experiment_code/Straights")
temp = list.files(pattern = c("dat2", "*.csv")) # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
dat2 <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
nosteer <- dat2 %>%
filter(response == "nosteer") %>%
mutate(response_num = 0)
steer <- dat2 %>%
filter(response == "steer") %>%
mutate(response_num = 1)
dat3 <- rbind(steer, nosteer)
View(dat3)
data(speed_acc, package = "rtdists")
speed_acc <- droplevels(speed_acc[!speed_acc$censor,]) # remove extreme RTs
speed_acc <- droplevels(speed_acc[ speed_acc$frequency %in%
c("high", "nw_high"),])
speed_acc$response2 <- as.numeric(speed_acc$response)-1
str(speed_acc)
View(speed_acc)
formula <- bf(rt | dec(response_num) ~ 0 + heading +
(0 + heading|p|pNum),
bs ~ 0 + heading + (0 + heading|p|pNum),
ndt ~ 0 + heading + (0 + heading|p|pNum),
bias ~ 0 + heading + (0 + heading|p|pNum))
formula <- bf(FirstSteeringTime | dec(response_num) ~ 0 + heading +
(0 + heading|p|pNum),
bs ~ 0 + heading + (0 + heading|p|pNum),
ndt ~ 0 + heading + (0 + heading|p|pNum),
bias ~ 0 + heading + (0 + heading|p|pNum))
sapply(speed_acc)
sapply(speed_acc, class)
sapply(dat3, class)
dat3$heading <- as.factor(dat3$heading)
dat3$heading <- as.factor(dat3$heading)
dat3$heading
rm(list = ls())
# rm(list = ls())
library(brms)
library(rtdists)
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/Straights") # set working directory
# setwd("C:/Users/Courtney/Documents/PhD/Project/Experiment_code/Straights")
temp = list.files(pattern = c("dat2", "*.csv")) # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
dat2 <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
nosteer <- dat2 %>%
filter(response == "nosteer") %>%
mutate(response_num = 0)
steer <- dat2 %>%
filter(response == "steer") %>%
mutate(response_num = 1)
dat3 <- rbind(steer, nosteer)
dat3$heading <- as.factor(dat3$heading)
dat3$pNum <- as.factor(dat3$pNum)
View(dat3)
formula <- bf(FirstSteeringTime | dec(response_num) ~ 0 + heading +
(0 + heading|p|pNum),
bs ~ 0 + heading + (0 + heading|p|pNum),
ndt ~ 0 + heading + (0 + heading|p|pNum),
bias ~ 0 + heading + (0 + heading|p|pNum))
get_prior(formula,
data = dat3,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"))
get_prior(formula,
data = dat3,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"))
prior <- c(
prior("cauchy(0, 5)", class = "b"),
set_prior("normal(1.5, 1)", class = "b", dpar = "bs"),
set_prior("normal(0.2, 0.1)", class = "b", dpar = "ndt"),
set_prior("normal(0.5, 0.2)", class = "b", dpar = "bias")
)
make_stancode(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat3,
prior = prior)
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat3, prior = prior)
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat3, prior = prior)
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = speed_acc, prior = prior)
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat3, prior = prior)
rm(list = ls())
# rm(list = ls())
library(brms)
library(rtdists)
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/Straights") # set working directory
# setwd("C:/Users/Courtney/Documents/PhD/Project/Experiment_code/Straights")
temp = list.files(pattern = c("dat2", "*.csv")) # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
dat2 <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
# nosteer <- dat2 %>%
#   filter(response == "nosteer") %>%
#   mutate(response_num = 0)
#
# steer <- dat2 %>%
#   filter(response == "steer") %>%
#   mutate(response_num = 1)
dat3 <- dat2 # rbind(steer, nosteer)
dat3$heading <- as.factor(dat3$heading)
dat3$pNum <- as.factor(dat3$pNum)
View(dat3)
formula <- bf(FirstSteeringTime | dec(response_num) ~ 0 + heading +
(0 + heading|p|pNum),
bs ~ 0 + heading + (0 + heading|p|pNum),
ndt ~ 0 + heading + (0 + heading|p|pNum),
bias ~ 0 + heading + (0 + heading|p|pNum))
get_prior(formula,
data = dat3,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"))
prior <- c(
prior("cauchy(0, 5)", class = "b"),
set_prior("normal(1.5, 1)", class = "b", dpar = "bs"),
set_prior("normal(0.2, 0.1)", class = "b", dpar = "ndt"),
set_prior("normal(0.5, 0.2)", class = "b", dpar = "bias")
)
make_stancode(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat3,
prior = prior)
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat3, prior = prior)
data(speed_acc, package = "rtdists")
speed_acc <- droplevels(speed_acc[!speed_acc$censor,]) # remove extreme RTs
speed_acc <- droplevels(speed_acc[ speed_acc$frequency %in%
c("high", "nw_high"),])
speed_acc$response2 <- as.numeric(speed_acc$response)-1
str(speed_acc)
formula
formula <- bf(rt | dec(response2) ~ 0 + condition:frequency +
(0 + condition:frequency|p|id),
bs ~ 0 + condition + (0 + condition|p|id),
ndt ~ 0 + condition + (0 + condition|p|id),
bias ~ 0 + condition + (0 + condition|p|id))
get_prior(formula,
data = speed_acc,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"))
prior <- c(
prior("cauchy(0, 5)", class = "b"),
set_prior("normal(1.5, 1)", class = "b", dpar = "bs"),
set_prior("normal(0.2, 0.1)", class = "b", dpar = "ndt"),
set_prior("normal(0.5, 0.2)", class = "b", dpar = "bias")
)
make_stancode(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = speed_acc,
prior = prior)
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = speed_acc, prior = prior)
str(tmp_dat, 1, give.attr = FALSE)
initfun <- function() {
list(
b = rnorm(tmp_dat$K),
b_bs = runif(tmp_dat$K_bs, 1, 2),
b_ndt = runif(tmp_dat$K_ndt, 0.1, 0.15),
b_bias = rnorm(tmp_dat$K_bias, 0.5, 0.1),
sd_1 = runif(tmp_dat$M_1, 0.5, 1),
z_1 = matrix(rnorm(tmp_dat$M_1*tmp_dat$N_1, 0, 0.01),
tmp_dat$M_1, tmp_dat$N_1),
L_1 = diag(tmp_dat$M_1)
)
}
fit_wiener <- brm(formula,
data = speed_acc,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
prior = prior, inits = initfun,
iter = 1000, warmup = 500,
chains = 4, cores = 4,
control = list(max_treedepth = 15))
NPRED <- 500
pred_wiener <- predict(fit_wiener,
summary = FALSE,
negative_rt = TRUE,
nsamples = NPRED)
conflict_prefer("lag", "dplyr")
conflict_prefer("lag", "dplyr")
fit_wiener <- brm(formula,
data = speed_acc,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
prior = prior, inits = initfun,
iter = 1000, warmup = 500,
chains = 4, cores = 4,
control = list(max_treedepth = 15))
NPRED <- 500
pred_wiener <- predict(fit_wiener,
summary = FALSE,
negative_rt = TRUE,
nsamples = NPRED)
rm(list = ls())
# rm(list = ls())
library(brms)
library(rtdists)
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/Straights") # set working directory
# setwd("C:/Users/Courtney/Documents/PhD/Project/Experiment_code/Straights")
temp = list.files(pattern = c("dat2", "*.csv")) # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
dat2 <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
# nosteer <- dat2 %>%
#   filter(response == "nosteer") %>%
#   mutate(response_num = 0)
#
# steer <- dat2 %>%
#   filter(response == "steer") %>%
#   mutate(response_num = 1)
dat3 <- dat2 # rbind(steer, nosteer)
dat3$heading <- as.factor(dat3$heading)
dat3$pNum <- as.factor(dat3$pNum)
View(dat3)
formula <- bf(FirstSteeringTime | dec(response_num) ~ 0 + heading|p|pNum),
formula <- bf(FirstSteeringTime | dec(response_num) ~ 0 + heading|p|pNum,
bs ~ 0 + heading|p|pNum),
formula <- bf(FirstSteeringTime | dec(response_num) ~ 0 + heading|p|pNum,
bs ~ 0 + heading|p|pNum,
ndt ~ 0 + heading|p|pNum,
bias ~ 0 + heading|p|pNum)
get_prior(formula,
data = dat3,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"))
prior <- c(
prior("cauchy(0, 5)", class = "b"),
set_prior("normal(1.5, 1)", class = "b", dpar = "bs"),
set_prior("normal(0.2, 0.1)", class = "b", dpar = "ndt"),
set_prior("normal(0.5, 0.2)", class = "b", dpar = "bias")
)
make_stancode(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat3,
prior = prior)
prior <- c(
prior("cauchy(0, 5)", class = "b"),
get_prior("normal(1.5, 1)", class = "b", dpar = "bs"),
get_prior("normal(0.2, 0.1)", class = "b", dpar = "ndt"),
get_prior("normal(0.5, 0.2)", class = "b", dpar = "bias")
)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
# rm(list = ls()) # clear environment
# load data
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/Straights") # set working directory
# setwd("C:/Users/Courtney/Documents/PhD/Project/Experiment_code/Straights")
temp = list.files(pattern = c("BenLui17_18_2", "*.csv")) # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
View(workingdata)
workingdataFirst <- workingdata %>%
filter(trialn <= 45) %>%
mutate(block = "First")
View(workingdataFirst)
workingdataFirst <- workingdata %>%
filter(trialn <= 45) %>%
mutate(block = "first")
workingdataSecond <- working %>%
filter(trialn > 45) %>%
mutate(block = "second")
workingdataFirst <- workingdata %>%
filter(trialn <= 45) %>%
mutate(block = "first")
workingdataSecond <- workingdata %>%
filter(trialn > 45) %>%
mutate(block = "second")
workingdata <- rbind(workingdataFirst, workingdataSecond)
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/Straights") # set working directory
# setwd("C:/Users/Courtney/Documents/PhD/Project/Experiment_code/Straights")
temp = list.files(pattern = c("dat2", "*.csv")) # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
dat2 <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
# nosteer <- dat2 %>%
#   filter(response == "nosteer") %>%
#   mutate(response_num = 0)
#
# steer <- dat2 %>%
#   filter(response == "steer") %>%
#   mutate(response_num = 1)
dat3 <- dat2 # rbind(steer, nosteer)
dat3$heading <- as.factor(dat3$heading)
dat3$pNum <- as.factor(dat3$pNum)
View(dat3)
dat3 %>%
group_by(pNum) %>%
s
dat3 %>%
group_by(pNum, response) %>%
summarise(n = n())
a <- dat3 %>%
group_by(pNum, response) %>%
summarise(n = n())
View(A)
View(a)
