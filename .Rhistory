mutate(YawRateChange = -(YawRateChange))
positivetimecourse <- workingdata %>%
dplyr::filter(heading > 0) %>%
mutate(heading = abs(heading)) %>%
mutate(YawRateChange = YawRateChange)
zerotimecourse <- workingdata %>%
dplyr::filter(heading == 0) %>%
mutate(heading = abs(heading)) %>%
mutate(YawRateChange = YawRateChange)
workingdata <- rbind(negativetimecourse, positivetimecourse, zerotimecourse)
rm(negativetimecourse, positivetimecourse, zerotimecourse)
# golay filter data
workingdata <- workingdata %>%
group_by(ppid_trialn) %>%
mutate(YawRateChange = sgolayfilt(YawRateChange, n = 11)) %>%
ungroup()
library(dplyr)
library(tidyr)
# code below is identical to the RT data selection - both trying to find the same thing (start of the response)
mag_response_start <- workingdata %>%
select(ppid_trialn, heading, frame, YawRateChange, anchored_timestamp, pNum, trial_number) %>%
group_by(ppid_trialn) %>%
dplyr::filter(max(YawRateChange) > upperthreshold, min(YawRateChange) < lowerthreshold) %>% # filter lowest yaw rate change smaller than the lower theshold, # filter largest yaw rate change greater than the upper threshold
slice(1:min(which(YawRateChange > upperthreshold, 1))) %>% # slice from the first yaw value, to the first yaw value above the upper thrshold
slice(min(which(YawRateChange > lowerthreshold, 1))) %>% # slice the row at the minimum yaw rate above the lower threshold to get start of the response
ungroup() %>%
transmute(ppid_trialn, heading, StartFrame = frame, StartYaw = YawRateChange, FirstSteeringTime = anchored_timestamp, pNum = pNum, trial_number = trial_number) %>%
# mutate(steering_zscore = scale(FirstSteeringTime)) %>%
mutate(EarlyResponses = FirstSteeringTime <= 0.15)
library(dplyr)
library(tidyr)
# code below is identical to the RT data selection - both trying to find the same thing (start of the response)
mag_response_start <- workingdata %>%
select(ppid_trialn, heading, frame, YawRateChange, anchored_timestamp, pNum, trial_number) %>%
group_by(ppid_trialn) %>%
dplyr::filter(max(YawRateChange) > upperthreshold, min(YawRateChange) < lowerthreshold) %>% # filter lowest yaw rate change smaller than the lower theshold, # filter largest yaw rate change greater than the upper threshold
slice(1:min(which(YawRateChange > upperthreshold, 1))) %>% # slice from the first yaw value, to the first yaw value above the upper thrshold
slice(min(which(YawRateChange > lowerthreshold, 1))) %>% # slice the row at the minimum yaw rate above the lower threshold to get start of the response
ungroup() %>%
transmute(ppid_trialn, heading, StartFrame = frame, StartYaw = YawRateChange, FirstSteeringTime = anchored_timestamp, pNum = pNum, block = block) %>%
# mutate(steering_zscore = scale(FirstSteeringTime)) %>%
mutate(EarlyResponses = FirstSteeringTime <= 0.15)
library(dplyr)
library(tidyr)
# code below is identical to the RT data selection - both trying to find the same thing (start of the response)
mag_response_start <- workingdata %>%
select(ppid_trialn, heading, frame, YawRateChange, anchored_timestamp, pNum, block) %>%
group_by(ppid_trialn) %>%
dplyr::filter(max(YawRateChange) > upperthreshold, min(YawRateChange) < lowerthreshold) %>% # filter lowest yaw rate change smaller than the lower theshold, # filter largest yaw rate change greater than the upper threshold
slice(1:min(which(YawRateChange > upperthreshold, 1))) %>% # slice from the first yaw value, to the first yaw value above the upper thrshold
slice(min(which(YawRateChange > lowerthreshold, 1))) %>% # slice the row at the minimum yaw rate above the lower threshold to get start of the response
ungroup() %>%
transmute(ppid_trialn, heading, StartFrame = frame, StartYaw = YawRateChange, FirstSteeringTime = anchored_timestamp, pNum = pNum, block = block) %>%
# mutate(steering_zscore = scale(FirstSteeringTime)) %>%
mutate(EarlyResponses = FirstSteeringTime <= 0.15)
# filters out early responses
mag_response_start <- mag_response_start %>%
dplyr::filter(EarlyResponses == FALSE)
library(dplyr)
library(tidyr)
mag_response_peak <- workingdata %>%
select(ppid_trialn, heading, frame, YawRateChange, anchored_timestamp, pNum, block) %>%
group_by(ppid_trialn) %>%
mutate(peakYaw = max(YawRateChange)) %>%
dplyr::filter(max(YawRateChange) > upperthreshold, min(YawRateChange) < lowerthreshold) %>%
slice(1:max(which(YawRateChange > upperthreshold, 1))) %>%
slice(max(which(YawRateChange == peakYaw))) %>%
ungroup() %>%
transmute(ppid_trialn, heading, PeakFrame = frame, PeakYaw = YawRateChange, PeakSteeringTime = anchored_timestamp, pNum = pNum, block = block)
# merge response start and response peak dataframes
magnitudedata <- merge(mag_response_start, mag_response_peak, by = "ppid_trialn")
rm(mag_response_start, mag_response_peak)
magnitudedata$heading.y <- NULL # remove duplicate column
magnitudedata$pNum.y <- NULL # rmeove duplicate
# magnitudedata$block.y <- NULL
magnitudedata$trial_number.y <- NULL
colnames(magnitudedata)[colnames(magnitudedata) == 'heading.x'] <- 'heading'
colnames(magnitudedata)[colnames(magnitudedata) == 'pNum.x'] <- 'pNum'
# colnames(magnitudedata)[colnames(magnitudedata) == 'block.x'] <- 'block'
colnames(magnitudedata)[colnames(magnitudedata) == 'trial_number.x'] <- 'trial_number'
library(dplyr)
library(tidyr)
mag_response_peak <- workingdata %>%
select(ppid_trialn, heading, frame, YawRateChange, anchored_timestamp, pNum, block) %>%
group_by(ppid_trialn) %>%
mutate(peakYaw = max(YawRateChange)) %>%
dplyr::filter(max(YawRateChange) > upperthreshold, min(YawRateChange) < lowerthreshold) %>%
slice(1:max(which(YawRateChange > upperthreshold, 1))) %>%
slice(max(which(YawRateChange == peakYaw))) %>%
ungroup() %>%
transmute(ppid_trialn, heading, PeakFrame = frame, PeakYaw = YawRateChange, PeakSteeringTime = anchored_timestamp, pNum = pNum, block = block)
# merge response start and response peak dataframes
magnitudedata <- merge(mag_response_start, mag_response_peak, by = "ppid_trialn")
library(dplyr)
library(tidyr)
# code below is identical to the RT data selection - both trying to find the same thing (start of the response)
mag_response_start <- workingdata %>%
select(ppid_trialn, heading, frame, YawRateChange, anchored_timestamp, pNum, block) %>%
group_by(ppid_trialn) %>%
dplyr::filter(max(YawRateChange) > upperthreshold, min(YawRateChange) < lowerthreshold) %>% # filter lowest yaw rate change smaller than the lower theshold, # filter largest yaw rate change greater than the upper threshold
slice(1:min(which(YawRateChange > upperthreshold, 1))) %>% # slice from the first yaw value, to the first yaw value above the upper thrshold
slice(min(which(YawRateChange > lowerthreshold, 1))) %>% # slice the row at the minimum yaw rate above the lower threshold to get start of the response
ungroup() %>%
transmute(ppid_trialn, heading, StartFrame = frame, StartYaw = YawRateChange, FirstSteeringTime = anchored_timestamp, pNum = pNum, block = block) %>%
# mutate(steering_zscore = scale(FirstSteeringTime)) %>%
mutate(EarlyResponses = FirstSteeringTime <= 0.15)
# filters out early responses
mag_response_start <- mag_response_start %>%
dplyr::filter(EarlyResponses == FALSE)
library(dplyr)
library(tidyr)
mag_response_peak <- workingdata %>%
select(ppid_trialn, heading, frame, YawRateChange, anchored_timestamp, pNum, block) %>%
group_by(ppid_trialn) %>%
mutate(peakYaw = max(YawRateChange)) %>%
dplyr::filter(max(YawRateChange) > upperthreshold, min(YawRateChange) < lowerthreshold) %>%
slice(1:max(which(YawRateChange > upperthreshold, 1))) %>%
slice(max(which(YawRateChange == peakYaw))) %>%
ungroup() %>%
transmute(ppid_trialn, heading, PeakFrame = frame, PeakYaw = YawRateChange, PeakSteeringTime = anchored_timestamp, pNum = pNum, block = block)
# merge response start and response peak dataframes
magnitudedata <- merge(mag_response_start, mag_response_peak, by = "ppid_trialn")
rm(mag_response_start, mag_response_peak)
magnitudedata$heading.y <- NULL # remove duplicate column
magnitudedata$pNum.y <- NULL # rmeove duplicate
magnitudedata$block.y <- NULL
colnames(magnitudedata)[colnames(magnitudedata) == 'heading.x'] <- 'heading'
colnames(magnitudedata)[colnames(magnitudedata) == 'pNum.x'] <- 'pNum'
colnames(magnitudedata)[colnames(magnitudedata) == 'block.x'] <- 'block'
# library(zoo)
library(dplyr)
library(tidyr)
# library(TTR)
workingdatathresholdUnsmooth <- workingdata %>%
group_by(ppid_trialn) %>%
dplyr::filter(max(YawRateChange) > upperthreshold, min(YawRateChange) < lowerthreshold) %>% # filter lowest yaw rate change smaller than the lower theshold, # filter largest yaw rate change greater than the upper threshold
slice(1:min(which(YawRateChange > upperthreshold, 1))) %>% # slice from the first yaw value, to the first yaw value above the upper thrshold
slice(min(which(YawRateChange > lowerthreshold, 1))) %>% # slice the row at the minimum yaw rate above the lower threshold to get start of the response
ungroup() %>%
transmute(ppid_trialn, heading, cameraoffset, SWAThres = SWA, FirstSteeringTime = anchored_timestamp, ThresWorld_x = World_x, ThresWorld_z = World_z, ThresWorldYaw = WorldYaw, ThresYawRate_seconds = YawRate_seconds,ThresYawRateChange = YawRateChange, pNum = pNum, block = block) %>% # gender = gender, age = age, licenseTime = licenseTime, contacts_glasses = contacts_glasses (removed for test modelling)
mutate(EarlyResponses = FirstSteeringTime <= 0.15)
'%!in%' <- function(x,y)!('%in%'(x,y)) # oppsite of %in%
responseid <- workingdatathresholdUnsmooth$ppid_trialn # gets IDs of responses
responseid <- as.vector(responseid) # convert IDs to vector
nonresponses <- dplyr::filter(workingdata, ppid_trialn %!in% responseid) # filter IDs that are not response IDs
nonresponses <- nonresponses %>%
group_by(ppid_trialn) %>%
mutate(response = "nosteer", response_num = 1, FirstSteeringTime = 2.5) %>%
slice(1) %>% # selects one row of each trial
ungroup()
a <- nonresponses %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, trial_number)
View(workingdatathresholdUnsmooth)
'%!in%' <- function(x,y)!('%in%'(x,y)) # oppsite of %in%
responseid <- workingdatathresholdUnsmooth$ppid_trialn # gets IDs of responses
responseid <- as.vector(responseid) # convert IDs to vector
nonresponses <- dplyr::filter(workingdata, ppid_trialn %!in% responseid) # filter IDs that are not response IDs
nonresponses <- nonresponses %>%
group_by(ppid_trialn) %>%
mutate(response = "nosteer", response_num = 1, FirstSteeringTime = 2.5) %>%
slice(1) %>% # selects one row of each trial
ungroup()
a <- nonresponses %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block)
workingdatathresholdUnsmooth <- workingdatathresholdUnsmooth %>%
group_by(ppid_trialn) %>%
mutate(response = "steer", response_num = 2)
b <- workingdatathresholdUnsmooth %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block)
# dat <- rbind(a, b) # WHY DON'T YOU FUCKING WORK!!!!!!!
ppid_trialn <- c(a$ppid_trialn, b$ppid_trialn)
heading <- c(a$heading, b$heading)
pNum <- c(a$pNum, b$pNum)
response <- c(a$response, b$response)
response_num <- c(a$response_num, b$response_num)
FirstSteeringTime <- c(a$FirstSteeringTime, b$FirstSteeringTime)
block <- c(a$block, b$block)
dat <- as.data.frame(cbind(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block))
rm(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, nonresponses, responseid, a, b, block)
dat <- dat %>%
filter(FirstSteeringTime > 0.15)
'%!in%' <- function(x,y)!('%in%'(x,y)) # oppsite of %in%
responseid <- workingdatathresholdUnsmooth$ppid_trialn # gets IDs of responses
responseid <- as.vector(responseid) # convert IDs to vector
nonresponses <- dplyr::filter(workingdata, ppid_trialn %!in% responseid) # filter IDs that are not response IDs
nonresponses <- nonresponses %>%
group_by(ppid_trialn) %>%
mutate(response = "nosteer", response_num = 1, FirstSteeringTime = 2.5) %>%
slice(1) %>% # selects one row of each trial
ungroup()
a <- nonresponses %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block)
workingdatathresholdUnsmooth <- workingdatathresholdUnsmooth %>%
group_by(ppid_trialn) %>%
mutate(response = "steer", response_num = 2)
b <- workingdatathresholdUnsmooth %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block)
# dat <- rbind(a, b) # WHY DON'T YOU FUCKING WORK!!!!!!!
ppid_trialn <- c(a$ppid_trialn, b$ppid_trialn)
heading <- c(a$heading, b$heading)
pNum <- c(a$pNum, b$pNum)
response <- c(a$response, b$response)
response_num <- c(a$response_num, b$response_num)
FirstSteeringTime <- c(a$FirstSteeringTime, b$FirstSteeringTime)
block <- c(a$block, b$block)
dat <- as.data.frame(cbind(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block))
rm(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, nonresponses, responseid, a, b, block)
dat <- dat %>%
dplyr::filter(FirstSteeringTime > 0.15)
View(dat)
'%!in%' <- function(x,y)!('%in%'(x,y)) # oppsite of %in%
responseid <- workingdatathresholdUnsmooth$ppid_trialn # gets IDs of responses
responseid <- as.vector(responseid) # convert IDs to vector
nonresponses <- dplyr::filter(workingdata, ppid_trialn %!in% responseid) # filter IDs that are not response IDs
nonresponses <- nonresponses %>%
group_by(ppid_trialn) %>%
mutate(response = "nosteer", response_num = 1, FirstSteeringTime = 2.5) %>%
slice(1) %>% # selects one row of each trial
ungroup()
a <- nonresponses %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block)
workingdatathresholdUnsmooth <- workingdatathresholdUnsmooth %>%
group_by(ppid_trialn) %>%
mutate(response = "steer", response_num = 2)
b <- workingdatathresholdUnsmooth %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block)
# dat <- rbind(a, b) # WHY DON'T YOU FUCKING WORK!!!!!!!
ppid_trialn <- c(a$ppid_trialn, b$ppid_trialn)
heading <- c(a$heading, b$heading)
pNum <- c(a$pNum, b$pNum)
response <- c(a$response, b$response)
response_num <- c(a$response_num, b$response_num)
FirstSteeringTime <- c(a$FirstSteeringTime, b$FirstSteeringTime)
block <- c(a$block, b$block)
dat <- as.data.frame(cbind(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block))
rm(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, nonresponses, responseid, a, b, block)
sapply(dat, class)
View(dat)
sapply(workingdatathresholdUnsmooth, class)
block <- c(a$block, b$block)
a <- nonresponses %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block)
'%!in%' <- function(x,y)!('%in%'(x,y)) # oppsite of %in%
responseid <- workingdatathresholdUnsmooth$ppid_trialn # gets IDs of responses
responseid <- as.vector(responseid) # convert IDs to vector
nonresponses <- dplyr::filter(workingdata, ppid_trialn %!in% responseid) # filter IDs that are not response IDs
nonresponses <- nonresponses %>%
group_by(ppid_trialn) %>%
mutate(response = "nosteer", response_num = 1, FirstSteeringTime = 2.5) %>%
slice(1) %>% # selects one row of each trial
ungroup()
a <- nonresponses %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block)
sappply(a, class)
sapply(a, class)
View(a)
block <- c(a$block, b$block)
b <- workingdatathresholdUnsmooth %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block)
block <- c(a$block, b$block)
View(block)
'%!in%' <- function(x,y)!('%in%'(x,y)) # oppsite of %in%
responseid <- workingdatathresholdUnsmooth$ppid_trialn # gets IDs of responses
responseid <- as.vector(responseid) # convert IDs to vector
nonresponses <- dplyr::filter(workingdata, ppid_trialn %!in% responseid) # filter IDs that are not response IDs
nonresponses <- nonresponses %>%
group_by(ppid_trialn) %>%
mutate(response = "nosteer", response_num = 1, FirstSteeringTime = 2.5) %>%
slice(1) %>% # selects one row of each trial
ungroup()
a <- nonresponses %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block)
workingdatathresholdUnsmooth <- workingdatathresholdUnsmooth %>%
group_by(ppid_trialn) %>%
mutate(response = "steer", response_num = 2)
b <- workingdatathresholdUnsmooth %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block)
# dat <- rbind(a, b) # WHY DON'T YOU FUCKING WORK!!!!!!!
ppid_trialn <- c(a$ppid_trialn, b$ppid_trialn)
heading <- c(a$heading, b$heading)
pNum <- c(a$pNum, b$pNum)
response <- c(a$response, b$response)
response_num <- c(a$response_num, b$response_num)
FirstSteeringTime <- c(a$FirstSteeringTime, b$FirstSteeringTime)
block <- c(a$block, b$block)
dat <- as.data.frame(cbind(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block))
rm(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, nonresponses, responseid, a, b, block)
dat <- dat %>%
dplyr::filter(FirstSteeringTime > 0.15)
sapply(dat, class)
dat$FirstSteeringTime <- as.character(dat$FirstSteeringTime)
dat$FirstSteeringTime <- as.numeric(dat$FirstSteeringTime)
dat <- dat %>%
dplyr::filter(FirstSteeringTime > 0.15)
'%!in%' <- function(x,y)!('%in%'(x,y)) # oppsite of %in%
responseid <- workingdatathresholdUnsmooth$ppid_trialn # gets IDs of responses
responseid <- as.vector(responseid) # convert IDs to vector
nonresponses <- dplyr::filter(workingdata, ppid_trialn %!in% responseid) # filter IDs that are not response IDs
nonresponses <- nonresponses %>%
group_by(ppid_trialn) %>%
mutate(response = "nosteer", response_num = 1, FirstSteeringTime = 2.5) %>%
slice(1) %>% # selects one row of each trial
ungroup()
a <- nonresponses %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block)
workingdatathresholdUnsmooth <- workingdatathresholdUnsmooth %>%
group_by(ppid_trialn) %>%
mutate(response = "steer", response_num = 2)
b <- workingdatathresholdUnsmooth %>%
select(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block)
# dat <- rbind(a, b) # WHY DON'T YOU FUCKING WORK!!!!!!!
ppid_trialn <- c(a$ppid_trialn, b$ppid_trialn)
heading <- c(a$heading, b$heading)
pNum <- c(a$pNum, b$pNum)
response <- c(a$response, b$response)
response_num <- c(a$response_num, b$response_num)
FirstSteeringTime <- c(a$FirstSteeringTime, b$FirstSteeringTime)
block <- c(a$block, b$block)
dat <- as.data.frame(cbind(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, block))
rm(ppid_trialn, heading, pNum, response, response_num, FirstSteeringTime, nonresponses, responseid, a, b, block)
sapply(dat, class)
dat$FirstSteeringTime <- as.character(dat$FirstSteeringTime)
dat$FirstSteeringTime <- as.numeric(dat$FirstSteeringTime)
dat <- dat %>%
dplyr::filter(FirstSteeringTime > 0.15)
View(dat)
dat %>%
group_by(block, heading) %>%
summarise(m = mean(FirstSteeringTime))
formula <- bf(FirstSteeringTime | dec(response_num) ~ 0 + block:heading +
(0 + block:heading|p|pNum),
bs ~ 0 + block + (0 + block|p|pNum),
ndt ~ 0 + block + (0 + block|p|pNum),
bias ~ 0 + block + (0 + block|p|pNum))
# rm(list = ls())
library(brms)
library(rtdists)
formula <- bf(FirstSteeringTime | dec(response_num) ~ 0 + block:heading +
(0 + block:heading|p|pNum),
bs ~ 0 + block + (0 + block|p|pNum),
ndt ~ 0 + block + (0 + block|p|pNum),
bias ~ 0 + block + (0 + block|p|pNum))
get_prior(formula,
data = dat,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"))
prior <- c(
prior("cauchy(0, 5)", class = "b"),
set_prior("normal(1.5, 1)", class = "b", dpar = "bs"),
set_prior("normal(0.2, 0.1)", class = "b", dpar = "ndt"),
set_prior("normal(0.5, 0.2)", class = "b", dpar = "bias")
)
make_stancode(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat,
prior = prior)
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat, prior = prior)
sapply(dat, class)
dat$response_num <- as.character(dat$response_num)
dat$response_num <- as.numeric(dat$response_num)
sapply(dat, class)
formula <- bf(FirstSteeringTime | dec(response_num) ~ 0 + block:heading +
(0 + block:heading|p|pNum),
bs ~ 0 + block + (0 + block|p|pNum),
ndt ~ 0 + block + (0 + block|p|pNum),
bias ~ 0 + block + (0 + block|p|pNum))
get_prior(formula,
data = dat,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"))
prior <- c(
prior("cauchy(0, 5)", class = "b"),
set_prior("normal(1.5, 1)", class = "b", dpar = "bs"),
set_prior("normal(0.2, 0.1)", class = "b", dpar = "ndt"),
set_prior("normal(0.5, 0.2)", class = "b", dpar = "bias")
)
make_stancode(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat,
prior = prior)
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat, prior = prior)
str(tmp_dat, 1, give.attr = FALSE)
initfun <- function() {
list(
b = rnorm(tmp_dat$K),
b_bs = runif(tmp_dat$K_bs, 1, 2),
b_ndt = runif(tmp_dat$K_ndt, 0.1, 0.15),
b_bias = rnorm(tmp_dat$K_bias, 0.5, 0.1),
sd_1 = runif(tmp_dat$M_1, 0.5, 1),
z_1 = matrix(rnorm(tmp_dat$M_1*tmp_dat$N_1, 0, 0.01),
tmp_dat$M_1, tmp_dat$N_1),
L_1 = diag(tmp_dat$M_1)
)
}
fit_wiener <- brm(formula,
data = speed_acc,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
prior = prior, inits = initfun,
iter = 1000, warmup = 500,
chains = 4, cores = 4,
control = list(max_treedepth = 15))
fit_wiener <- brm(formula,
data = dat,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
prior = prior, inits = initfun,
iter = 1000, warmup = 500,
chains = 4, cores = 4,
control = list(max_treedepth = 15))
fit_wiener <- brm(formula,
data = dat,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
prior = prior, inits = initfun,
iter = 1000, warmup = 500,
chains = 4, cores = 4,
control = list(max_treedepth = 15))
formula <- bf(FirstSteeringTime | dec(response_num) ~ 0 + heading +
(0 + heading|p|pNum),
bs ~ 0 + heading|p|pNum,
ndt ~ 0 + heading|p|pNum,
bias ~ 0 + heading|p|pNum)
get_prior(formula,
data = dat,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"))
prior <- c(
prior("cauchy(0, 5)", class = "b"),
set_prior("normal(1.5, 1)", class = "b", dpar = "bs"),
set_prior("normal(0.2, 0.1)", class = "b", dpar = "ndt"),
set_prior("normal(0.5, 0.2)", class = "b", dpar = "bias")
)
make_stancode(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat,
prior = prior)
formula <- bf(FirstSteeringTime | dec(response_num) ~ 0 + block:heading +
(0 + block:heading|p|pNum),
bs ~ 0 + block + (0 + block|p|pNum),
ndt ~ 0 + block + (0 + block|p|pNum),
bias ~ 0 + block + (0 + block|p|pNum))
get_prior(formula,
data = dat,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"))
prior <- c(
prior("cauchy(0, 5)", class = "b"),
set_prior("normal(1.5, 1)", class = "b", dpar = "bs"),
set_prior("normal(0.2, 0.1)", class = "b", dpar = "ndt"),
set_prior("normal(0.5, 0.2)", class = "b", dpar = "bias")
)
make_stancode(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat,
prior = prior)
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = dat, prior = prior)
str(tmp_dat, 1, give.attr = FALSE)
initfun <- function() {
list(
b = rnorm(tmp_dat$K),
b_bs = runif(tmp_dat$K_bs, 1, 2),
b_ndt = runif(tmp_dat$K_ndt, 0.1, 0.15),
b_bias = rnorm(tmp_dat$K_bias, 0.5, 0.1),
sd_1 = runif(tmp_dat$M_1, 0.5, 1),
z_1 = matrix(rnorm(tmp_dat$M_1*tmp_dat$N_1, 0, 0.01),
tmp_dat$M_1, tmp_dat$N_1),
L_1 = diag(tmp_dat$M_1)
)
}
fit_wiener <- brm(formula,
data = dat,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
prior = prior, inits = initfun,
iter = 1000, warmup = 500,
chains = 4, cores = 4,
control = list(max_treedepth = 15))
NPRED <- 500
pred_wiener <- predict(fit_wiener,
summary = FALSE,
negative_rt = TRUE,
nsamples = NPRED)
install.packages("RWiener")
