geom_abline(slope = slopesm3, intercept = interceptsm3)
mean(slopesm2)
sd(slopesm2)
sd(interceptsm2)
mean(slopesm3)
sd(slopesm3)
sd(interceptsm3)
seq(-2,2,length=20)
seq(-2,2,length=4)
seq(0,2,length=4)
seq(0.5,2,length=4)
new_temp<-data.frame(Temp = seq(0.5,2,length = 4))
pred_temp<-predict(m2, newdata = new_temp, re.form = ~0)
new_temp<-data.frame(inver_heading = 1 / seq(0.5,2,length = 4))
pred_temp<-predict(m2, newdata = new_temp, re.form = ~0)
View(pred_temp)
ci_line<-bootMer(m2, FUN = function(.) predict(.,newdata = new_temp, re.form=~0), nsim=200)
ci_regT<-apply(ci_line$t,2,function(x) x[order(x)][c(5,195)])
plot(FirstSteeringTime ~ inver_heading, modellingdata)
lines(new_temp$Temp,pred_temp,lwd=3)
plot(FirstSteeringTime ~ inver_heading, modellingdata)
new_temp$Temp
new_temp
plot(FirstSteeringTime ~ inver_heading, modellingdata)
lines(new_temp$inver_heading, pred_temp, lwd=3)
lines(new_temp$inver_heading, ci_regT[1,],lty=2)
lines(new_temp$inver_heading, ci_regT[2,],lty=2)
# plot heading effects
new_temp<-data.frame(inver_heading = 1 / seq(0.5,2,length = 4))
pred_temp<-predict(m2, newdata = new_temp, re.form = ~0)
# compute bootstrapped confidence interval, see ?predict.merMod
ci_line<-bootMer(m2, FUN = function(.) predict(.,newdata = new_temp, re.form=~0), nsim=200)
ci_regT<-apply(ci_line$t,2,function(x) x[order(x)][c(5,195)])
plot(jitter(FirstSteeringTime ~ inver_heading), modellingdata)
new_data <- data.frame(inver_heading = 1 / seq(0.5,2,length = 4))
pred_data <- predict(m2, newdata = new_temp, re.form = ~0)
View(new_data)
View(pred_data)
new_data <- data.frame(inver_heading = as.numeric(1 / seq(0.5,2,length = 4)))
sapply(new_data, class)
ci_line <- bootMer(m2, FUN = function(.) predict(.,newdata = new_temp, re.form = ~0), nsim = 200)
View(ci_line)
ci_regT <- apply(ci_line$t, 2, function(x) x[order(x)][c(5,195)])
plot(jitter(FirstSteeringTime ~ inver_heading), modellingdata)
sapply(modellingdata, class)
plot(jitter(FirstSteeringTime ~ inver_heading), modellingdata)
View(modellingdata)
plot(FirstSteeringTime ~ jitter(inver_heading), modellingdata)
lines(new_temp$inver_heading, pred_temp, lwd=3)
lines(new_temp$inver_heading, ci_regT[1,],lty=2)
lines(new_temp$inver_heading, ci_regT[2,],lty=2)
plot(FirstSteeringTime ~ jitter(inver_heading, 2), modellingdata)
lines(new_temp$inver_heading, pred_temp, lwd=3)
lines(new_temp$inver_heading, ci_regT[1,],lty=2)
lines(new_temp$inver_heading, ci_regT[2,],lty=2)
plot(FirstSteeringTime ~ jitter(inver_heading, 4), modellingdata)
lines(new_temp$inver_heading, pred_temp, lwd=3)
lines(new_temp$inver_heading, ci_regT[1,],lty=2)
lines(new_temp$inver_heading, ci_regT[2,],lty=2)
plot(FirstSteeringTime ~ jitter(inver_heading, 3), modellingdata)
lines(new_temp$inver_heading, pred_temp, lwd=3)
lines(new_temp$inver_heading, ci_regT[1,],lty=2)
lines(new_temp$inver_heading, ci_regT[2,],lty=2)
plot(FirstSteeringTime ~ jitter(inver_heading, 3), modellingdata)
lines(new_data$inver_heading, pred_data, lwd=3)
lines(new_data$inver_heading, ci_regT[1,],lty=2)
lines(new_data$inver_heading, ci_regT[2,],lty=2)
plot(FirstSteeringTime ~ jitter(inver_heading), modellingdata)
lines(new_data$inver_heading, pred_data, lwd=3)
lines(new_data$inver_heading, ci_regT[1,],lty=2)
lines(new_data$inver_heading, ci_regT[2,],lty=2)
plot(FirstSteeringTime ~ jitter(inver_heading, 2), modellingdata)
lines(new_data$inver_heading, pred_data, lwd=3)
lines(new_data$inver_heading, ci_regT[1,],lty=2)
lines(new_data$inver_heading, ci_regT[2,],lty=2)
# plot heading effects
# Simulate new data based upon the fitted model
new_data <- data.frame(inver_heading = as.numeric(1 / seq(0.5,2,length = 4)))
pred_data <- predict(m2, newdata = new_temp, re.form = ~0)
# compute bootstrapped confidence interval, see ?predict.merMod
ci_line <- bootMer(m2, FUN = function(.) predict(.,newdata = new_temp, re.form = ~0), nsim = 200)
ci_regT <- apply(ci_line$t, 2, function(x) x[order(x)][c(5,195)])
# plot original data with CIs from simulated data
plot(FirstSteeringTime ~ jitter(inver_heading, 2), modellingdata)
lines(new_data$inver_heading, pred_data, lwd=3)
lines(new_data$inver_heading, ci_regT[1,],lty=2)
lines(new_data$inver_heading, ci_regT[2,],lty=2)
mtext(text = "Regression curves with 95% confidence intervals", side = 3, outer = FALSE, at = -3)
snarc_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient:
heading_coefs[i] <- tmp_coef[2]
}
View(heading_coefs)
View(tmp_coef)
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
}
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
}
heading_tmp <- modellingdata[modellingdata$pNum == i,]
View(heading_tmp)
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
View(reg_result)
reg_result[["coefficients"]]
tmp_coef <- coef(reg_result)
View(tmp_coef)
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient and intercept for each subject:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
}
View(heading_coefs)
View(heading_intercept)
reg_result[["coefficients"]]
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lmer(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading = (1 + heading_tmp$inver_heading | heading_tmp$pNum))
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lmer(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading + (1 + heading_tmp$inver_heading | heading_tmp$pNum))
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient and intercept for each subject:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
}
lmer(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading + (1 + heading_tmp$inver_heading | heading_tmp$pNum))
View(heading_tmp)
lmer(FirstSteeringTime ~ inver_heading + (1 + inver_heading | pNum))
lmer(FirstSteeringTime ~ inver_heading + (1 + inver_heading | pNum), data = modellingdata)
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lmer(FirstSteeringTime ~ inver_heading + (1 + inver_heading | pNum), data = heading_tmp)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient and intercept for each subject:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
}
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient and intercept for each subject:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
}
ggplot(modellingdata, aes(x = inver_heading, y = FirstSteeringTime, color = as.factor(pNum))) +
geom_jitter(alpha = .3) +
geom_abline(slope = heading_coefs, intercept = heading_intercept) +
theme(legend.position = "none") +
theme(axis.text.x = element_blank()) +
ggtitle("RTs against heading - individual single level regression slopes")
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient and intercept for each subject:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
plot(heading_intercept[i], heading_coefs[i])
}
ggplot(modellingdata, aes(x = inver_heading, y = FirstSteeringTime, color = as.factor(pNum))) +
geom_jitter(alpha = .3) +
geom_abline(slope = heading_coefs, intercept = heading_intercept) +
theme(legend.position = "none") +
theme(axis.text.x = element_blank()) +
ggtitle("RTs against heading - individual single level regression slopes")
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient and intercept for each subject:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
plot(lines(heading_intercept[i], heading_coefs[i]))
}
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient and intercept for each subject:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
plot(heading_intercept[i], heading_coefs[i])
lines(heading_intercept[i], heading_coefs[i])
}
ggplot(modellingdata, aes(x = inver_heading, y = FirstSteeringTime, color = as.factor(pNum))) +
geom_jitter(alpha = .3) +
geom_abline(slope = heading_coefs, intercept = heading_intercept) +
theme(legend.position = "none") +
theme(axis.text.x = element_blank()) +
ggtitle("RTs against heading - individual single level regression slopes")
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient and intercept for each subject:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
plot(heading_tmp$inver_heading, heading_tmp$FirstSteeringTime)
abline(heading_intercept[i], heading_coefs[i])
}
ggplot(modellingdata, aes(x = inver_heading, y = FirstSteeringTime, color = as.factor(pNum))) +
geom_jitter(alpha = .3) +
geom_abline(slope = heading_coefs, intercept = heading_intercept) +
theme(legend.position = "none") +
theme(axis.text.x = element_blank()) +
ggtitle("RTs against heading - individual single level regression slopes")
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient and intercept for each subject:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
plot(jitter(heading_tmp$inver_heading), heading_tmp$FirstSteeringTime)
abline(heading_intercept[i], heading_coefs[i])
}
ggplot(modellingdata, aes(x = inver_heading, y = FirstSteeringTime, color = as.factor(pNum))) +
geom_jitter(alpha = .3) +
geom_abline(slope = heading_coefs, intercept = heading_intercept) +
theme(legend.position = "none") +
theme(axis.text.x = element_blank()) +
ggtitle("RTs against heading - individual single level regression slopes")
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient and intercept for each subject:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
plot(jitter(heading_tmp$inver_heading, 3), heading_tmp$FirstSteeringTime)
abline(heading_intercept[i], heading_coefs[i])
}
ggplot(modellingdata, aes(x = inver_heading, y = FirstSteeringTime, color = as.factor(pNum))) +
geom_jitter(alpha = .3) +
geom_abline(slope = heading_coefs, intercept = heading_intercept) +
theme(legend.position = "none") +
theme(axis.text.x = element_blank()) +
ggtitle("RTs against heading - individual single level regression slopes")
?predict.merMod
?predict.merMod
?merMod
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(car)
library(MASS)
library(dplyr)
library(EnvStats)
library(lme4)
library(nlme)
library(tidyr)
?predict.merMod
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient and intercept for each subject:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
plot(jitter(heading_tmp$inver_heading, 3), heading_tmp$FirstSteeringTime)
abline(heading_intercept[i], heading_coefs[i])
}
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
# rm(list = ls())
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/Straights")
temp = list.files(pattern = c("magnitudedata", "*.csv")) # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
magnitudedata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
library(ggplot2)
library(dplyr)
library(car)
library(MASS)
library(dplyr)
library(EnvStats)
library(lme4)
library(nlme)
library(tidyr)
ggplot(filter(magnitudedata, heading > 0) %>%
group_by(pNum, heading) %>%
summarise(medianRT = median(FirstSteeringTime)), aes(x = heading, y = medianRT)) +
geom_point() +
geom_line() +
facet_wrap(~ pNum)
modellingdata <- magnitudedata %>%
dplyr::filter(heading > 0) %>% # remove 0 heading trials for modelling data
mutate(inver_heading = 1 / heading) # compute inverse of heading for ease of interpretting intercept
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient and intercept for each subject:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
plot(jitter(heading_tmp$inver_heading, 3), heading_tmp$FirstSteeringTime)
abline(heading_intercept[i], heading_coefs[i])
}
# plotting individuals on the same plot
ggplot(modellingdata, aes(x = inver_heading, y = FirstSteeringTime, color = as.factor(pNum))) +
geom_jitter(alpha = .3) +
geom_abline(slope = heading_coefs, intercept = heading_intercept) +
theme(legend.position = "none") +
theme(axis.text.x = element_blank()) +
ggtitle("RTs against heading - individual single level regression slopes")
m2 <- lmer(formula = FirstSteeringTime ~ inver_heading + (1 + inver_heading | pNum), data = modellingdata)
summary(m2)
modellingdata <- magnitudedata %>%
dplyr::filter(heading > 0) %>% # remove 0 heading trials for modelling data
mutate(inver_heading = 1 / heading) # compute inverse of heading for ease of interpretting intercept
# model 1 - varying intercept
m1 <- lmer(formula = FirstSteeringTime ~ inver_heading + (1 | pNum), data = modellingdata)
summary(m1)
# coef(m1)
# model 2 -  varying intercept and slope
m2 <- lmer(formula = FirstSteeringTime ~ inver_heading + (1 + inver_heading | pNum), data = modellingdata)
summary(m2)
# coef(m2)
# model 3 -  varying intercept and slope
# m3 <- lmer(formula = FirstSteeringTime ~ inver_heading + (1 + heading | pNum), data = modellingdata)
# summary(m2)
# # coef(m2)
par(mfrow=c(2,2))
plot(fitted(m2),resid(m2,type="pearson"),col="blue") # a plot to check the constant standard deviation
abline(h=0,lwd=2)
qqnorm(resid(m2)) # normality of the residuals
qqline(resid(m2))
qqnorm(ranef(m2)$pNum[,1])
qqline(ranef(m2)$pNum[,1])
plot(coef(m2)$pNum)
plot(coef(m2)$pNum)
# create empty vectors for slope coefficients and intercepts
heading_coefs = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
heading_intercept = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)
for (i in c(1:19)){
# Create temporary data frame:
heading_tmp <- modellingdata[modellingdata$pNum == i,]
# Perform regression:
reg_result <- lm(heading_tmp$FirstSteeringTime ~ heading_tmp$inver_heading)
# Get coefficient:
tmp_coef <- coef(reg_result)
# Store coefficient and intercept for each subject:
heading_coefs[i] <- tmp_coef[2]
heading_intercept[i] <- tmp_coef[1]
plot(jitter(heading_tmp$inver_heading, 3), heading_tmp$FirstSteeringTime)
abline(heading_intercept[i], heading_coefs[i])
}
# plotting individuals on the same plot
ggplot(modellingdata, aes(x = inver_heading, y = FirstSteeringTime, color = as.factor(pNum))) +
geom_jitter(alpha = .3) +
geom_abline(slope = heading_coefs, intercept = heading_intercept) +
theme(legend.position = "none") +
theme(axis.text.x = element_blank()) +
ggtitle("RTs against heading - individual single level regression slopes")
# plot heading effects
# Simulate new data based upon the fitted model
new_data <- data.frame(inver_heading = as.numeric(1 / seq(0.5,2,length = 4)))
pred_data <- predict(m2, newdata = new_data, re.form = ~0)
# compute bootstrapped confidence interval, see ?predict.merMod
ci_line <- bootMer(m2, FUN = function(.) predict(.,newdata = new_temp, re.form = ~0), nsim = 200)
# plot heading effects
# Simulate new data based upon the fitted model
new_data <- data.frame(inver_heading = as.numeric(1 / seq(0.5,2,length = 4)))
pred_data <- predict(m2, newdata = new_data, re.form = ~0)
# compute bootstrapped confidence interval, see ?predict.merMod
ci_line <- bootMer(m2, FUN = function(.) predict(.,newdata = new_data, re.form = ~0), nsim = 200)
ci_regT <- apply(ci_line$t, 2, function(x) x[order(x)][c(5,195)])
# plot original data with CIs from simulated data
plot(FirstSteeringTime ~ jitter(inver_heading, 2), modellingdata)
lines(new_data$inver_heading, pred_data, lwd = 3)
lines(new_data$inver_heading, ci_regT[1,], lty = 2)
lines(new_data$inver_heading, ci_regT[2,], lty = 2)
mtext(text = "Regression curves with 95% confidence intervals", side = 3, outer = FALSE, at = -3)
library(arm)
library(arm)
n.sims <- 1000
fit.1 <- lm(FirstSteeringTime ~ heading, data = magnitudedata)
sim.1 <- sim(fit.1, n.sims)
sim.1
View(sim.1)
modellingdata <- magnitudedata %>%
dplyr::filter(heading > 0) %>% # remove 0 heading trials for modelling data
mutate(inver_heading = 1 / heading) # compute inverse of heading for ease of interpretting intercept
# model 1 - varying intercept
m1 <- lmer(formula = FirstSteeringTime ~ inver_heading + (1 | pNum), data = modellingdata)
summary(m1)
# coef(m1)
# model 2 -  varying intercept and slope
m2 <- lmer(formula = FirstSteeringTime ~ inver_heading + (1 + inver_heading | pNum), data = modellingdata)
summary(m2)
# coef(m2)
# model 3 -  varying intercept and slope
# m3 <- lmer(formula = FirstSteeringTime ~ inver_heading + (1 + heading | pNum), data = modellingdata)
# summary(m2)
# # coef(m2)
par(mfrow=c(2,2))
plot(fitted(m2),resid(m2,type="pearson"),col="blue") # a plot to check the constant standard deviation
abline(h=0,lwd=2)
qqnorm(resid(m2)) # normality of the residuals
qqline(resid(m2))
qqnorm(ranef(m2)$pNum[,1])
qqline(ranef(m2)$pNum[,1])
plot(coef(m2)$pNum)
plot(coef(m2)$pNum)
