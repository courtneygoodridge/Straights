group_by(ppid_trialn)%>%
mutate(row_number())%>% # added to verify selection
filter(max(abs(YawRateChange)) > upperthreshold, # filter largest yaw rate change greater than the upper threshold
min(abs(YawRateChange)) < lowerthreshold) %>% # filter lowest yaw rate change smaller than the lower theshold
slice(1:min(which(abs(YawRateChange) > upperthreshold))) %>%
slice(max(which(abs(YawRateChange) < lowerthreshold))) %>% # which() returns rows where a condition is true. Taking the min() of all the rows that are greater than the criteria will return the first row where that is true.
ungroup() %>%
transmute(ppid_trialn, heading, cameraoffset, SWAThres = SWA, FirstSteeringTime = anchored_timestamp, ThresWorld_x = World_x, ThresWorld_z = World_z, ThresWorldYaw = WorldYaw, ThresYawRate_seconds = YawRate_seconds, ThresYawRateChange = YawRateChange)
##################################### SMOOTHING DATA ###################################
# workingdatatimecourseSmooth <- workingdatatimecourseUnsmooth %>%
#   mutate(smoothedYawRateChange = SMA(YawRateChange, n = 1)) # calculates moving average over the number of data points you specify
#
# workingdatatimecourseSmooth[is.na(workingdatatimecourseSmooth)] <- 0 # set NA values to 0. This is because smoothing data in this way creates NA values if you don't have enough to average over. Unsure how else to get around this
#
# # determine first time in each ppid, trialn group above threshold
# workingdatathresholdSmooth <- workingdatatimecourseSmooth %>%
#   group_by(ppid_trialn)%>%
#   mutate(row_number())%>% # added to verify selection
#   filter(max(abs(smoothedYawRateChange)) > upperthreshold, # filter largest yaw rate change greater than the upper threshold
#          min(abs(smoothedYawRateChange)) < lowerthreshold) %>% # filter lowest yaw rate change smaller than the lower theshold
#   slice(1:min(which(abs(smoothedYawRateChange) > upperthreshold))) %>%
#   slice(max(which(abs(smoothedYawRateChange) < lowerthreshold))) %>% # which() returns rows where a condition is true. Taking the min() of all the rows that are greater than the criteria will return the first row where that is true.
#   ungroup() %>%
#   transmute(ppid_trialn, heading, cameraoffset, SWAThres = SWA, FirstSteeringTime = anchored_timestamp, ThresWorld_x = World_x, ThresWorld_z = World_z, ThresWorldYaw = WorldYaw, ThresYawRate_seconds = YawRate_seconds, ThresYawRateChange = smoothedYawRateChange)
##################################### SMOOTHING DATA ###################################
# Here SWA angle is redundent as it only takes the SWA for when the change in yaw rate is over the threshold... I'm interested in ThresYawRateChange (first change in yaw rate over threhsold) and FirstYawRateChangeTimeThres (first timestamp where yaw rate change is over threshold).
#Only thing extra would be to calculate frame rate (60 frames) (ask Richard), and then multiply by change in yaw rate to get yaw rate per second per second.
ThresholdingAlgo <- function(y,lag,threshold,influence) {
signals <- rep(0,length(y))
filteredY <- y[0:lag]
avgFilter <- NULL
stdFilter <- NULL
avgFilter[lag] <- mean(y[0:lag])
stdFilter[lag] <- sd(y[0:lag])
for (i in (lag+1):length(y)){
if (abs(y[i]-avgFilter[i-1]) > threshold*stdFilter[i-1]) {
if (y[i] > avgFilter[i-1]) {
signals[i] <- 1;
} else {
signals[i] <- -1;
}
filteredY[i] <- influence*y[i]+(1-influence)*filteredY[i-1]
} else {
signals[i] <- 0
filteredY[i] <- y[i]
}
avgFilter[i] <- mean(filteredY[(i-lag):i])
stdFilter[i] <- sd(filteredY[(i-lag):i])
}
return(list("signals"=signals,"avgFilter"=avgFilter,"stdFilter"=stdFilter))
}
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2, ppid_trialn == "1_0")
lag       <- 30
threshold <- 5
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
View(y)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2, ppid_trialn == "1_0")
y <- y$YawRateChange
View(y)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2, ppid_trialn == "1_0")
y <- y$YawRateChange
lag       <- 30
threshold <- 5
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2, ppid_trialn == "1_0")
y <- y$YawRateChange
lag       <- 30
threshold <- 10
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(anchored_timestamp) %>%
summarise(meanYawRateChange = mean(YawRateChange),
y <- y$meanYawRateChange
View(y)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(anchored_timestamp) %>%
summarise(meanYawRateChange = mean(YawRateChange))
y <- y$meanYawRateChange
View(y)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(anchored_timestamp) %>%
summarise(meanYawRateChange = mean(YawRateChange))
y <- y$meanYawRateChange
lag       <- 30
threshold <- 10
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(anchored_timestamp) %>%
summarise(meanYawRateChange = mean(YawRateChange))
y <- workingdatatimecourseUnsmooth %>%
filter(heading == -2) %>%
group_by(anchored_timestamp) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = anchored_timestamp, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 30
threshold <- 10
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
nrow(filter(workingdatatimecourseUnsmooth, heading == -2, 1_0))
nrow(filter(workingdatatimecourseUnsmooth, heading == -2, ppid_trilan == "1_0"))
nrow(filter(workingdatatimecourseUnsmooth, heading == -2, ppid_trialn == "1_0"))
View(filter(workingdatatimecourseUnsmooth, heading == -2))
nrow(filter(workingdatatimecourseUnsmooth, heading == -2, ppid_trialn == "1_5"))
nrow(filter(workingdatatimecourseUnsmooth, heading == -2, ppid_trialn == "1_8"))
nrow(filter(workingdatatimecourseUnsmooth, heading == -2, ppid_trialn == "1_11"))
View(nrow(filter(workingdatatimecourseUnsmooth, heading == -2) %>% group_by(ppid_trialn)))
nrow(filter(workingdatatimecourseUnsmooth, heading == -2, ppid_trialn == "1_35"))
View(filter(workingdatatimecourseUnsmooth, heading == -1))
nrow(filter(workingdatatimecourseUnsmooth, ppid_trialn == "2_0"))
nrow(filter(workingdatatimecourseUnsmooth, ppid_trialn == "3_0"))
View(filter(workingdatatimecourseUnsmooth, heading == 2))
nrow(filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_6"))
nrow(filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_41"))
nrow(filter(workingdatatimecourseUnsmooth, ppid_trialn == "3_3"))
nrow(filter(workingdatatimecourseUnsmooth, ppid_trialn == "3_6"))
nrow(filter(workingdata, ppid_trialn == "3_6"))
nrow(filter(workingdata, ppid_trialn == "3_3"))
nrow(filter(workingdata, ppid_trialn == "3_0"))
nrow(filter(workingdata, ppid_trialn == "32_0"))
nrow(filter(workingdata, ppid_trialn == "2_0"))
nrow(filter(workingdata, ppid_trialn == "1_0"))
View(workingdata)
workingdata %>%
group_by(ppid_trialn) %>%
min(nrow())
knitr::opts_chunk$set(echo = TRUE)
a <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_8", ppid_trialn == "1_11",ppid_trialn == "1_35")
View(a)
a <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_8")
b <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_11")
c <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_35")
a <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_8")
b <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_11")
c <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_35")
d <- merge(a, b, c)
View(A)
View(A)
View(a)
View(b)
a <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_8")
b <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_11")
c <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_35")
d <- merge(a, b, c, by = c(ppid_trialn))
a <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_8")
b <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_11")
c <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_35")
d <- merge(a, b, c, by = c("ppid_trialn"))
a <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_8")
b <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_11")
c <- filter(workingdatatimecourseUnsmooth, ppid_trialn == "1_35")
d <- rbind(a,b,c)
View(d)
y <- d %>%
group_by(anchored_timestamp) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = anchored_timestamp, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 30
threshold <- 10
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
a <- filter(workingdata, ppid_trialn == "1_8")
b <- filter(workingdata, ppid_trialn == "1_11")
c <- filter(workingdata, ppid_trialn == "1_35")
d <- rbind(a,b,c)
a <- filter(workingdata, ppid_trialn == "1_8")
b <- filter(workingdata, ppid_trialn == "1_11")
d <- rbind(a,b,c)
View(workingdata)
View(d)
a <- filter(workingdata, ppid_trialn == "1_8")
b <- filter(workingdata, ppid_trialn == "1_11")
d <- rbind(a,b)
y <- d %>%
group_by(anchored_timestamp) %>%
summarise(meanYawRateChange = mean(YawRateChange))
a <- filter(workingdata, ppid_trialn == "1_8")
b <- filter(workingdata, ppid_trialn == "1_11")
d <- rbind(a,b)
d <- d %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) %>%
filter(anchored_timestamp<=min(anchored_timestamp)+4) %>%
ungroup()
View(d)
y <- d %>%
group_by(anchored_timestamp) %>%
summarise(meanYawRateChange = mean(YawRateChange))
ggplot(y, aes(x = anchored_timestamp, y = meanYawRateChange)) +
geom_line()
y <- y$meanYawRateChange
lag       <- 30
threshold <- 10
influence <- 0
result <- ThresholdingAlgo(y,lag,threshold,influence)
# Plot result
par(mfrow = c(2,1),oma = c(2,2,0,0) + 0.1,mar = c(0,0,2,1) + 0.2)
plot(1:length(y),y,type="l",ylab="",xlab="")
lines(1:length(y),result$avgFilter,type="l",col="cyan",lwd=2)
lines(1:length(y),result$avgFilter+threshold*result$stdFilter,type="l",col="green",lwd=2)
lines(1:length(y),result$avgFilter-threshold*result$stdFilter,type="l",col="green",lwd=2)
plot(result$signals,type="S",col="red",ylab="",xlab="",ylim=c(-1.5,1.5),lwd=2)
knitr::opts_chunk$set(echo = TRUE)
install.packages("matlab")
library(matlab)
library(dplyr)
a <- filter(workingdata, ppid_trialn == "1_8")
b <- filter(workingdata, ppid_trialn == "1_11")
a <- a %>%
mutate(NewAnchoredTimestamp = linspace(0, 4, nrow(ppid_trialn)))
library(matlab)
library(dplyr)
a <- filter(workingdata, ppid_trialn == "1_8")
b <- filter(workingdata, ppid_trialn == "1_11")
a <- a %>%
mutate(NewAnchoredTimestamp = linspace(0, 4, nrow(a)))
d <- rbind(a,b)
View(a)
library(matlab)
library(dplyr)
a <- filter(workingdata, ppid_trialn == "1_8")
b <- filter(workingdata, ppid_trialn == "1_11")
d <- rbind(a,b)
d <- d %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) %>%
filter(anchored_timestamp<=min(anchored_timestamp)+4) %>%
ungroup()
d <- d %>%
mutate(NewAnchoredTimestamp = linspace(0, 4, nrow(ppid_trialn)))
d <- d %>%
mutate(NewAnchoredTimestamp = linspace(0, 4, as.numeric(nrow(ppid_trialn))))
d <- d %>%
group_by(ppid_trialn)
mutate(NewAnchoredTimestamp = linspace(0, 4, nrow())
)
d <- d %>%
mutate(NewAnchoredTimestamp = linspace(0, 4, nrow(group_by(ppid_trialn))))
d <- d %>%
mutate(NewAnchoredTimestamp = linspace(0, 4, nrow(d$ppid_trialn))))
d <- d %>%
mutate(NewAnchoredTimestamp = linspace(0, 4, nrow(d$ppid_trialn)))
nrow(d$ppid_trialn)
d <- d %>%
group_by(ppid_trialn) %>%
mutate(NewAnchoredTimestamp = linspace(0, 4, count()))
d <- d %>%
mutate(NewAnchoredTimestamp = linspace(0, 4, count(ppid_trialn)))
d <- d %>%
group_by(ppid_trialn)
mutate(NewAnchoredTimestamp = linspace(0, 4, n())
)
View(workingdata)
workingdata %>%
s
z <- workingdata %>%
group_by(ppid_trialn) %>%
summarise(rows = n())
View(z)
min(z)
is.na(z)
min(z$rows)
max(z$rows)
nrow(filter(workingdat, ppid_trial == "1_8"))
nrow(filter(workingdata, ppid_trial == "1_8"))
nrow(filter(workingdata, ppid_trialn == "1_8"))
nrow(filter(workingdata, ppid_trialn == "1_11"))
a <- filter(workingdata, ppid_trialn == "1_8")
a_1 <- a %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) %>%
filter(anchored_timestamp<=min(anchored_timestamp)+4)
b <- filter(workingdata, ppid_trialn == "1_11")
b_1 <- a %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) %>%
filter(anchored_timestamp<=min(anchored_timestamp)+4)
View(a_1)
View(b_1)
subset = bindrows(subset,filter(workingdata, ppid_tialn == "1_0")[1:266,])
library(dplyr)
library(tid``)
library(tidyr)
subset = bindrows(subset,filter(workingdata, ppid_tialn == "1_0")[1:266,])
install.packages("replyr")
library(replyr)
subset = bindrows(subset,filter(workingdata, ppid_tialn == "1_0")[1:266,])
f
subset = rbind(subset,filter(data, ppid_tialn == "1_0")[1:266,])
install.packages("tidyverse")
subset = rbind(subset,filter(data, ppid_tialn == "1_0")[1:266,])
subset = bindrows(subset,filter(workingdata, ppid_tialn == "1_0")[1:266,])
subset = bind_rows(subset,filter(workingdata, ppid_tialn == "1_0")[1:266,])
subset = bind_rows(subset,filter(workingdata, ppid_trialn == "1_0")[1:266,])
subset = bind_rows(subset(filter(workingdata, ppid_trialn == "1_0")[1:266,]))
View(subset)
a <- filter(workingdata, ppid_trialn == "1_0")
View(a)
subset = bind_rows(subset(filter(workingdata, ppid_trialn == "1_1")[1:266,]))
a <- filter(workingdata, ppid_trialn == "1_1")
View(a)
b <- workingdata %>%
group_by(ppid_trialn) %>%
top_n(-266)
b <- workingdata %>%
top_n(ppid_trialn, -266)
View(workingdata)
b <- workingdata %>%
top_n("ppid_trialn", -266)
# chooseCRANmirror(graphics=FALSE, ind=1) # uncomment for knitting
# rm(list = ls()) # clear workspace
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(tidyr)
install.packages(TTR)
install.packages(zoo)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
workingdata <- unite(workingdata, ppid_trialn, ppid, trialn, sep = "") # create unique ppid_trialn ID
View(workingdata)
b <- workingdata %>%
top_n(ppid_trialn, -266)
b <- workingdata %>%
group_by(ppid_trialn) %>%
top_n(-266)
# chooseCRANmirror(graphics=FALSE, ind=1) # uncomment for knitting
# rm(list = ls()) # clear workspace
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(tidyr)
install.packages(TTR)
install.packages(zoo)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
workingdata <- unite(workingdata, ppid_trialn, ppid, trialn, sep = "_") # create unique ppid_trialn ID
b <- workingdata %>%
arrange(group_by(ppid_trialn)) %>%
top_n(-266)
b <- workingdata %>%
top_n(group_by(ppid_trialn), -266)
View(workingdata)
group_by(workingdata, ppid_trialn) %>% top_n(266)
b <- group_by(workingdata, ppid_trialn) %>% top_n(266)
View(b)
nrow(filter(b, ppid_trialn == "1_0"))
nrow(filter(b, ppid_trialn == "2_0"))
nrow(filter(b, ppid_trialn == "1_11"))
c <- workingdata %>%
group_by(ppid_trialn) %>%
top_n(266)
View(c)
b <- group_by(workingdata, ppid_trialn) %>% top_n(-266)
View(b)
# chooseCRANmirror(graphics=FALSE, ind=1) # uncomment for knitting
# rm(list = ls()) # clear workspace
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(tidyr)
install.packages(TTR)
install.packages(zoo)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
workingdata <- unite(workingdata, ppid_trialn, ppid, trialn, sep = "_") # create unique ppid_trialn ID
library(dplyr)
library(tidyr)
workingdata <- unite(workingdata, ppid_trialn, ppid, trialn, sep = "_") # create unique ppid_trialn ID
b <- workingdata %>%
group_by(ppid_trialn) %>%
top_n(-266)
b <- workingdata %>%
group_by(ppid_trialn) %>%
filtertop_n(-266)
b <- workingdata %>%
top_n(timestamp, -266)
b <- workingdata %>%
filter()
b <- workingdata %>%
group_by(ppid_trialn) %>%
filter(row_number() == 266)
b <- workingdata %>%
top_n(ppid_trialn, -266)
install.packages("reprex")
reprex(mean(rnorm(10)))
ungroup()
workingdata %>%
ungroup()
workingdata <- workingdata %>%
ungroup()
b <- group_by(workingdata, ppid_trialn) %>% top_n(-266)
b <- workingdata %>% group_by(workingdata, ppid_trialn) %>% top_n(-266)
b <- workingdata %>% group_by(ppid_trialn) %>% top_n(-266)
b <- workingdata %>% group_by(workingdata, ppid_trialn) %>% top_n(-266, wt = ppid_trialn)
b <- group_by(workingdata, ppid_trialn) %>% top_n(-266, wt = ppid_trialn)
View(b)
x <- workingdata %>%
ungroup() %>%
group_by(ppid_trialn) %>%
top_n(-266, wt = ppid_trialn)
library(reprex)
knitr::opts_chunk$set(echo = TRUE)
chooseCRANmirror(graphics=FALSE, ind=1)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(tidyr)
install.packages(TTR)
install.packages(zoo)
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles)
b <- workingdata %>% group_by(data, ppid_trialn) %>% arrange(timestamp) %>% slice(1:266)
b <- workingdata %>% group_by(workingdata, ppid_trialn) %>% arrange(timestamp) %>% slice(1:266)
b <- group_by(workingdata, ppid_trialn) %>% arrange(timestamp) %>% slice(1:266)
View(workingdata)
workingdata <- unite(workingdata, ppid_trialn, ppid, trialn, sep = "_") # create unique ppid_trialn ID
b <- group_by(workingdata, ppid_trialn) %>% arrange(timestamp) %>% slice(1:266)
View(b)
nrow(filter(b, ppid_trialn == "ppid_trialn"))
nrow(filter(b, ppid_trialn == "2_8"))
View(nrow(filter(b, ppid_trialn == "2_8")))
View(filter(b, ppid_trialn == "2_8")))
View(filter(b, ppid_trialn == "2_8"))
View(filter(workingdata, ppid_trialn == "2_8"))
rows <- b %>%
group_by(ppid_trialn) %>%
summarise(rows = n())
View(rows)
unique(rows)
unique(rows$rows)
rm(list = ls())
# chooseCRANmirror(graphics=FALSE, ind=1) # uncomment for knitting
# rm(list = ls()) # clear workspace
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(tidyr)
install.packages(TTR)
install.packages(zoo)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
workingdata <- unite(workingdata, ppid_trialn, ppid, trialn, sep = "_") # create unique ppid_trialn ID
workingdata <- workingdata %>% group_by(ppid_trialn) %>% slice(1:266)
workingdata <- workingdata %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) %>%
filter(anchored_timestamp<=min(anchored_timestamp)+4) %>%
ungroup()
View(filter(workingdata, ppid_trialn == "1_1"))
View(filter(workingdata, ppid_trialn == "3_30"))
nrow(filter(workingdata, ppid_trialn == "3_30"))
workingdata <- workingdata %>% group_by(ppid_trialn) %>% slice(1:266)
workingdata <- workingdata %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) %>%
filter(anchored_timestamp<=min(anchored_timestamp)+4) %>%
ungroup()
