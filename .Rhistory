install.packages(dplyr)
install.packages(matlab)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
library(dplyr)
# change in steering threshold
yawratechange_threshold = 0.2
YRchange <- workingdata$YawRate_seconds - c(0,workingdata$YawRate_seconds[-length(workingdata$YawRate_seconds)]) # calculating difference in yawrate
YRchange <- data.frame(YRchange) # convert yaw rate to dataframe
colnames(YRchange) <- c("YawRateChange") # change column names
workingdata <- cbind(workingdata, YRchange) # join dataframes
# determine first time in each ppid for each trialn
first_time <- workingdata %>%
group_by(ppid,trialn) %>%
filter(row_number() == 1) %>%
ungroup()  %>%
transmute(ppid, heading, trialn, cameraoffset, SWAStart = SWA, TrialStart = timestamp, StartWorld_x = World_x, StartWorld_z = World_z, StartWorldYaw = WorldYaw, StartYawRate_seconds = YawRate_seconds, StartYawRateChange = YawRateChange) #use transmute to rename nwly computed variable (TrialStart) future join, ungroup first to allow for column rename of grouping variable
# determine first time in each ppid, trialn group above threshold
threshold <-workingdata %>%
group_by(ppid,trialn) %>%
filter(abs(YawRateChange) > yawratechange_threshold) %>%
filter(row_number() == 1) %>%
ungroup() %>%
transmute(ppid, heading, trialn, cameraoffset, SWAThres = SWA, FirstYawRateChangeTimeThres = timestamp, ThresWorld_x = World_x, ThresWorld_z = World_z, ThresWorldYaw = WorldYaw, ThresYawRate_seconds = YawRate_seconds, ThresYawRateChange = YawRateChange) #use transmute to rename for future join, ungroup first to allow for column rename of grouping variable
last <-workingdata %>%
group_by(ppid,trialn) %>%
filter(abs(YawRateChange) > yawratechange_threshold) %>%
filter(row_number() == tail(timestamp, n = 1))
# Here SWA angle is redundent as it only takes the SWA for when the change in yaw rate is over the threshold... I'm interested in ThresYawRateChange (first change in yaw rate over threhsold) and FirstYawRateChangeTimeThres (first timestamp where yaw rate change is over threshold).
# produce final result set with ppid, trialn, first time, and first time above yaw rate change threshold
workingdatafinal <- left_join(first_time, threshold, by = c("ppid", "heading", "cameraoffset", "trialn")) %>%
mutate(FirstSteeringTime = FirstYawRateChangeTimeThres - TrialStart) # calculate final result: first timestamp where change in yaw rate is over threshold minus starting trial timestamp
#Only thing extra would be to calculate frame rate (60 frames) (ask Richard), and then multiply by change in yaw rate to get yaw rate per second per second.
library(ggplot2)
library(dplyr)
library(tidyr)
library(matlab)
####### -1 ########
minus1 <- workingdata %>%
filter(heading < 0 & heading > -2)
minus1data <-  minus1 %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup() # filters data so only first 4 seconds from the start of the trial is selected
minus1data <- unite(minus1data, ppid_trialn, ppid, trialn, sep = "_") # creating uniuqe ID for participants and trials
minus1data <- minus1data %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) # creating new variable of 4 second data in order to plot everything on top of each other
###### -2 #######
minus2 <- workingdata %>%
filter(heading < -1)
minus2data <-  minus2 %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup() # filters data so only first 4 seconds from the start of the trial is selected
minus2data <- unite(minus2data, ppid_trialn, ppid, trialn, sep = "_") # creating uniuqe ID for participants and trials
minus2data <- minus2data %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) # creating new variable of 4 second data in order to plot everything on top of each other
###### +1 ########
plus1 <- workingdata %>%
filter(heading > 0 & heading < 2)
plus1data <-  plus1 %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup() # filters data so only first 4 seconds from the start of the trial is selected
plus1data <- unite(plus1data, ppid_trialn, ppid, trialn, sep = "_") # creating uniuqe ID for participants and trials
plus1data <- plus1data %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) # creating new variable of 4 second data in order to plot everything on top of each other
###### +2 #######
plus2 <- workingdata %>%
filter(heading > 1)
plus2data <-  plus2 %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup() # filters data so only first 4 seconds from the start of the trial is selected
plus2data <- unite(plus2data, ppid_trialn, ppid, trialn, sep = "_") # creating uniuqe ID for participants and trials
plus2data <- plus2data %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) # creating new variable of 4 second data in order to plot everything on top of each other
library(ggplot2)
ggplot(minus1data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("-1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
ggplot(minus2data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("-2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
ggplot(plus1data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("+1 heading") +
scale_y_continuous(limits = c(-0.60, 0.50))
ggplot(plus2data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("+2 heading") +
scale_y_continuous(limits = c(-0.60, 0.50))
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(matlab)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
FOURworkingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
library(dplyr)
FOURworkingdata <- FOURworkingdata %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup()
# change in steering threshold
yawratechange_threshold = 0.2
FOURYRchange <- FOURworkingdata$YawRate_seconds - c(0,FOURworkingdata$YawRate_seconds[-length(FOURworkingdata$YawRate_seconds)]) # calculating difference in yawrate
FOURYRchange <- data.frame(FOURYRchange) # convert yaw rate to dataframe
colnames(FOURYRchange) <- c("YawRateChange") # change column names
FOURworkingdata <- cbind(FOURworkingdata, FOURYRchange) # join dataframes
# determine first time in each ppid for each trialn
first_time <- FOURworkingdata %>%
group_by(ppid,trialn) %>%
filter(row_number() == 1) %>%
ungroup()  %>%
transmute(ppid, heading, trialn, cameraoffset, SWAStart = SWA, TrialStart = timestamp, StartWorld_x = World_x, StartWorld_z = World_z, StartWorldYaw = WorldYaw, StartYawRate_seconds = YawRate_seconds, StartYawRateChange = YawRateChange) #use transmute to rename nwly computed variable (TrialStart) future join, ungroup first to allow for column rename of grouping variable
# determine first time in each ppid, trialn group above threshold
threshold <-FOURworkingdata %>%
group_by(ppid,trialn) %>%
filter(abs(YawRateChange) > yawratechange_threshold) %>%
filter(row_number() == 1) %>%
ungroup() %>%
transmute(ppid, heading, trialn, cameraoffset, SWAThres = SWA, FirstYawRateChangeTimeThres = timestamp, ThresWorld_x = World_x, ThresWorld_z = World_z, ThresWorldYaw = WorldYaw, ThresYawRate_seconds = YawRate_seconds, ThresYawRateChange = YawRateChange) #use transmute to rename for future join, ungroup first to allow for column rename of grouping variable
last <-FOURworkingdata %>%
group_by(ppid,trialn) %>%
filter(abs(YawRateChange) > yawratechange_threshold) %>%
filter(row_number() == tail(timestamp, n = 1))
# Here SWA angle is redundent as it only takes the SWA for when the change in yaw rate is over the threshold... I'm interested in ThresYawRateChange (first change in yaw rate over threhsold) and FirstYawRateChangeTimeThres (first timestamp where yaw rate change is over threshold).
# produce final result set with ppid, trialn, first time, and first time above yaw rate change threshold
FOURworkingdatafinal <- left_join(first_time, threshold, by = c("ppid", "heading", "cameraoffset", "trialn")) %>%
mutate(FirstSteeringTime = FirstYawRateChangeTimeThres - TrialStart) # calculate final result: first timestamp where change in yaw rate is over threshold minus starting trial timestamp
#Only thing extra would be to calculate frame rate (60 frames) (ask Richard), and then multiply by change in yaw rate to get yaw rate per second per second.
FOURworkingdatafinal %>%
group_by(heading) %>%
summarise(meanFirstSteering = mean(FirstSteeringTime, na.rm = TRUE))
# chooseCRANmirror(graphics=FALSE, ind=1) # uncomment for knitting
# rm(list = ls()) # clear workspace
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(matlab)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
library(dplyr)
FOURworkingdata <- FOURworkingdata %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup()
# change in steering threshold
yawratechange_threshold = 0.1
FOURYRchange <- FOURworkingdata$YawRate_seconds - c(0,FOURworkingdata$YawRate_seconds[-length(FOURworkingdata$YawRate_seconds)]) # calculating difference in yawrate
FOURYRchange <- data.frame(FOURYRchange) # convert yaw rate to dataframe
colnames(FOURYRchange) <- c("YawRateChange") # change column names
FOURworkingdata <- cbind(FOURworkingdata, FOURYRchange) # join dataframes
# determine first time in each ppid for each trialn
first_time <- FOURworkingdata %>%
group_by(ppid,trialn) %>%
filter(row_number() == 1) %>%
ungroup()  %>%
transmute(ppid, heading, trialn, cameraoffset, SWAStart = SWA, TrialStart = timestamp, StartWorld_x = World_x, StartWorld_z = World_z, StartWorldYaw = WorldYaw, StartYawRate_seconds = YawRate_seconds, StartYawRateChange = YawRateChange) #use transmute to rename nwly computed variable (TrialStart) future join, ungroup first to allow for column rename of grouping variable
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(matlab)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
FOURworkingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
library(dplyr)
FOURworkingdata <- FOURworkingdata %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup()
# change in steering threshold
yawratechange_threshold = 0.1
FOURYRchange <- FOURworkingdata$YawRate_seconds - c(0,FOURworkingdata$YawRate_seconds[-length(FOURworkingdata$YawRate_seconds)]) # calculating difference in yawrate
FOURYRchange <- data.frame(FOURYRchange) # convert yaw rate to dataframe
colnames(FOURYRchange) <- c("YawRateChange") # change column names
FOURworkingdata <- cbind(FOURworkingdata, FOURYRchange) # join dataframes
# determine first time in each ppid for each trialn
first_time <- FOURworkingdata %>%
group_by(ppid,trialn) %>%
filter(row_number() == 1) %>%
ungroup()  %>%
transmute(ppid, heading, trialn, cameraoffset, SWAStart = SWA, TrialStart = timestamp, StartWorld_x = World_x, StartWorld_z = World_z, StartWorldYaw = WorldYaw, StartYawRate_seconds = YawRate_seconds, StartYawRateChange = YawRateChange) #use transmute to rename nwly computed variable (TrialStart) future join, ungroup first to allow for column rename of grouping variable
# determine first time in each ppid, trialn group above threshold
threshold <-FOURworkingdata %>%
group_by(ppid,trialn) %>%
filter(abs(YawRateChange) > yawratechange_threshold) %>%
filter(row_number() == 1) %>%
ungroup() %>%
transmute(ppid, heading, trialn, cameraoffset, SWAThres = SWA, FirstYawRateChangeTimeThres = timestamp, ThresWorld_x = World_x, ThresWorld_z = World_z, ThresWorldYaw = WorldYaw, ThresYawRate_seconds = YawRate_seconds, ThresYawRateChange = YawRateChange) #use transmute to rename for future join, ungroup first to allow for column rename of grouping variable
last <-FOURworkingdata %>%
group_by(ppid,trialn) %>%
filter(abs(YawRateChange) > yawratechange_threshold) %>%
filter(row_number() == tail(timestamp, n = 1))
# Here SWA angle is redundent as it only takes the SWA for when the change in yaw rate is over the threshold... I'm interested in ThresYawRateChange (first change in yaw rate over threhsold) and FirstYawRateChangeTimeThres (first timestamp where yaw rate change is over threshold).
# produce final result set with ppid, trialn, first time, and first time above yaw rate change threshold
FOURworkingdatafinal <- left_join(first_time, threshold, by = c("ppid", "heading", "cameraoffset", "trialn")) %>%
mutate(FirstSteeringTime = FirstYawRateChangeTimeThres - TrialStart) # calculate final result: first timestamp where change in yaw rate is over threshold minus starting trial timestamp
#Only thing extra would be to calculate frame rate (60 frames) (ask Richard), and then multiply by change in yaw rate to get yaw rate per second per second.
FOURworkingdatafinal %>%
group_by(heading) %>%
summarise(meanFirstSteering = mean(FirstSteeringTime, na.rm = TRUE))
# chooseCRANmirror(graphics=FALSE, ind=1) # uncomment for knitting
# rm(list = ls()) # clear workspace
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
install.packages(dplyr)
install.packages(matlab)
# install.packages("magrittr")
setwd("M:/PhD/Project/Experiment_Code/Straights") # set working directory
temp = list.files(pattern = "*.csv") # list all CSV files in the directory
myfiles = lapply(temp, read.csv) # read these CSV in the directory
workingdata <- do.call(rbind.data.frame, myfiles) # convert and combine the CSV files into dataframe
library(dplyr)
# change in steering threshold
yawratechange_threshold = 0.1
YRchange <- workingdata$YawRate_seconds - c(0,workingdata$YawRate_seconds[-length(workingdata$YawRate_seconds)]) # calculating difference in yawrate
YRchange <- data.frame(YRchange) # convert yaw rate to dataframe
colnames(YRchange) <- c("YawRateChange") # change column names
workingdata <- cbind(workingdata, YRchange) # join dataframes
# determine first time in each ppid for each trialn
first_time <- workingdata %>%
group_by(ppid,trialn) %>%
filter(row_number() == 1) %>%
ungroup()  %>%
transmute(ppid, heading, trialn, cameraoffset, SWAStart = SWA, TrialStart = timestamp, StartWorld_x = World_x, StartWorld_z = World_z, StartWorldYaw = WorldYaw, StartYawRate_seconds = YawRate_seconds, StartYawRateChange = YawRateChange) #use transmute to rename nwly computed variable (TrialStart) future join, ungroup first to allow for column rename of grouping variable
# determine first time in each ppid, trialn group above threshold
threshold <-workingdata %>%
group_by(ppid,trialn) %>%
filter(abs(YawRateChange) > yawratechange_threshold) %>%
filter(row_number() == 1) %>%
ungroup() %>%
transmute(ppid, heading, trialn, cameraoffset, SWAThres = SWA, FirstYawRateChangeTimeThres = timestamp, ThresWorld_x = World_x, ThresWorld_z = World_z, ThresWorldYaw = WorldYaw, ThresYawRate_seconds = YawRate_seconds, ThresYawRateChange = YawRateChange) #use transmute to rename for future join, ungroup first to allow for column rename of grouping variable
last <-workingdata %>%
group_by(ppid,trialn) %>%
filter(abs(YawRateChange) > yawratechange_threshold) %>%
filter(row_number() == tail(timestamp, n = 1))
# Here SWA angle is redundent as it only takes the SWA for when the change in yaw rate is over the threshold... I'm interested in ThresYawRateChange (first change in yaw rate over threhsold) and FirstYawRateChangeTimeThres (first timestamp where yaw rate change is over threshold).
# produce final result set with ppid, trialn, first time, and first time above yaw rate change threshold
workingdatafinal <- left_join(first_time, threshold, by = c("ppid", "heading", "cameraoffset", "trialn")) %>%
mutate(FirstSteeringTime = FirstYawRateChangeTimeThres - TrialStart) # calculate final result: first timestamp where change in yaw rate is over threshold minus starting trial timestamp
#Only thing extra would be to calculate frame rate (60 frames) (ask Richard), and then multiply by change in yaw rate to get yaw rate per second per second.
library(ggplot2)
library(dplyr)
library(tidyr)
library(matlab)
####### -1 ########
minus1 <- workingdata %>%
filter(heading < 0 & heading > -2)
minus1data <-  minus1 %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup() # filters data so only first 4 seconds from the start of the trial is selected
minus1data <- unite(minus1data, ppid_trialn, ppid, trialn, sep = "_") # creating uniuqe ID for participants and trials
minus1data <- minus1data %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) # creating new variable of 4 second data in order to plot everything on top of each other
###### -2 #######
minus2 <- workingdata %>%
filter(heading < -1)
minus2data <-  minus2 %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup() # filters data so only first 4 seconds from the start of the trial is selected
minus2data <- unite(minus2data, ppid_trialn, ppid, trialn, sep = "_") # creating uniuqe ID for participants and trials
minus2data <- minus2data %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) # creating new variable of 4 second data in order to plot everything on top of each other
###### +1 ########
plus1 <- workingdata %>%
filter(heading > 0 & heading < 2)
plus1data <-  plus1 %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup() # filters data so only first 4 seconds from the start of the trial is selected
plus1data <- unite(plus1data, ppid_trialn, ppid, trialn, sep = "_") # creating uniuqe ID for participants and trials
plus1data <- plus1data %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) # creating new variable of 4 second data in order to plot everything on top of each other
###### +2 #######
plus2 <- workingdata %>%
filter(heading > 1)
plus2data <-  plus2 %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup() # filters data so only first 4 seconds from the start of the trial is selected
plus2data <- unite(plus2data, ppid_trialn, ppid, trialn, sep = "_") # creating uniuqe ID for participants and trials
plus2data <- plus2data %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) # creating new variable of 4 second data in order to plot everything on top of each other
library(ggplot2)
ggplot(minus1data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("-1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
ggplot(minus2data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("-2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
ggplot(plus1data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("+1 heading") +
scale_y_continuous(limits = c(-0.60, 0.50))
ggplot(plus2data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("+2 heading") +
scale_y_continuous(limits = c(-0.60, 0.50))
library(dplyr)
library(ggplot2)
#### -1 ####
minus1data <- minus1data %>%
group_by(ppid_trialn, anchored_timestamp) %>%
mutate(meanYRC = mean(YawRateChange))
ggplot(minus1data, aes(x = anchored_timestamp, y = meanYRC)) +
geom_line() +
scale_y_continuous(limits = c(-0.50, 0.75))
#### -2 ####
minus2data <- minus2data %>%
group_by(ppid_trialn, anchored_timestamp) %>%
mutate(meanYRC = mean(YawRateChange))
ggplot(minus2data, aes(x = anchored_timestamp, y = meanYRC)) +
geom_line() +
scale_y_continuous(limits = c(-0.50, 0.75))
#### +1 ####
plus1data <- plus1data %>%
group_by(ppid_trialn, anchored_timestamp) %>%
mutate(meanYRC = mean(YawRateChange))
ggplot(plus1data, aes(x = anchored_timestamp, y = meanYRC)) +
geom_line() +
scale_y_continuous(limits = c(-0.50, 0.50))
#### +2 ####
plus2data <- plus2data %>%
group_by(ppid_trialn, anchored_timestamp) %>%
mutate(meanYRC = mean(YawRateChange))
ggplot(plus2data, aes(x = anchored_timestamp, y = meanYRC)) +
geom_line() +
scale_y_continuous(limits = c(-0.50, 0.50))
library(ggplot2)
ggplot(minus1data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("-1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
ggplot(minus2data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("-2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
ggplot(plus1data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("+1 heading") +
scale_y_continuous(limits = c(-0.60, 0.50))
ggplot(plus2data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("+2 heading") +
scale_y_continuous(limits = c(-0.60, 0.50))
library(ggplot2)
ggplot(minus1data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("-1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
ggplot(minus2data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("-2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
ggplot(plus1data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("+1 heading") +
scale_y_continuous(limits = c(-0.60, 0.50))
ggplot(plus2data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("+2 heading") +
scale_y_continuous(limits = c(-0.60, 0.50))
View(plus1data)
a <- plus2data %>%
filter(ppid_trialn == 1_10)
View(plus2data)
library(ggplot2)
library(dplyr)
library(tidyr)
library(matlab)
####### -1 ########
minus1 <- workingdata %>%
filter(heading < 0 & heading > -2)
minus1data <-  minus1 %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup() # filters data so only first 4 seconds from the start of the trial is selected
minus1data <- unite(minus1data, ppid_trialn, ppid, trialn, sep = "_") # creating uniuqe ID for participants and trials
minus1data <- minus1data %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) # creating new variable of 4 second data in order to plot everything on top of each other
###### -2 #######
minus2 <- workingdata %>%
filter(heading < -1)
minus2data <-  minus2 %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup() # filters data so only first 4 seconds from the start of the trial is selected
minus2data <- unite(minus2data, ppid_trialn, ppid, trialn, sep = "_") # creating uniuqe ID for participants and trials
minus2data <- minus2data %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) # creating new variable of 4 second data in order to plot everything on top of each other
###### +1 ########
plus1 <- workingdata %>%
filter(heading > 0 & heading < 2)
plus1data <-  plus1 %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup() # filters data so only first 4 seconds from the start of the trial is selected
plus1data <- unite(plus1data, ppid_trialn, ppid, trialn, sep = "_") # creating uniuqe ID for participants and trials
plus1data <- plus1data %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) # creating new variable of 4 second data in order to plot everything on top of each other
###### +2 #######
plus2 <- workingdata %>%
filter(heading > 1)
plus2data <-  plus2 %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup() # filters data so only first 4 seconds from the start of the trial is selected
plus2data <- unite(plus2data, ppid_trialn, ppid, trialn, sep = "_") # creating uniuqe ID for participants and trials
plus2data <- plus2data %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) # creating new variable of 4 second data in order to plot everything on top of each other
zero <- workingdata %>%
filter(heading == 0)
zerodata <-  zero %>%
group_by(ppid, trialn) %>%
filter(timestamp<=min(timestamp)+4) %>%
ungroup() # filters data so only first 4 seconds from the start of the trial is selected
zerodata <- unite(zerodata, ppid_trialn, ppid, trialn, sep = "_") # creating uniuqe ID for participants and trials
zerodata <- zerodata %>%
group_by(ppid_trialn) %>%
mutate(anchored_timestamp = timestamp - min(timestamp)) # creating new variable of 4 second data in order to plot everything on top of each other
library(ggplot2)
ggplot(minus1data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("-1 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
ggplot(minus2data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("-2 heading") +
scale_y_continuous(limits = c(-0.50, 0.75))
ggplot(plus1data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("+1 heading") +
scale_y_continuous(limits = c(-0.60, 0.50))
ggplot(plus2data, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line() +
ggtitle("+2 heading") +
scale_y_continuous(limits = c(-0.60, 0.50))
ggplot(zerodata, aes(x = anchored_timestamp, y = YawRateChange, colour = ppid_trialn)) +
geom_line()
View(minus1data)
knitr::opts_chunk$set(echo = TRUE)
thresh <- 40
set.seed(0)
YawRateChange <- rnorm(100, mean = 45, sd = 5)
look_ahead <- 5
conseq_over_thresh <- rep(NA, length(YawRateChange))
for (i in seq_along(YawRateChange)) {
if (i + look_ahead - 1 > length(YawRateChange)) next # stop early if we run out of look ahead space
chunk <- YawRateChange[i:(i + look_ahead - 1)]
if (all(chunk > thresh)) {
conseq_over_thresh[i + look_ahead - 1] <- 1
} else {
conseq_over_thresh[i + look_ahead - 1] <- 0
}
}
data.frame(
YawRateChange,
conseq_over_thresh
)
View(YawRateChange)
View(conseq_over_thresh)
library(zoo)
window <- 4 #number of observation to average over
workingdata  <- data.frame(YawRateChange = rnorm(20, 0, 0.1), RMEAN = NA)
workingdata[1:(nrow(workingdata) - window + 1),]$RMEAN <-  rollmean(workingdata$YawRateChange, k=window)
install.packages(zoo)
knitr::opts_chunk$set(echo = TRUE)
install.packages(zoo)
library(zoo)
knitr::opts_chunk$set(echo = TRUE)
install.packages(zoo)
library(zoo)
window <- 4 #number of observation to average over
workingdata  <- data.frame(YawRateChange = rnorm(20, 0, 0.1), RMEAN = NA)
workingdata[1:(nrow(workingdata) - window + 1),]$RMEAN <-  rollmean(workingdata$YawRateChange, k=window)
knitr::opts_chunk$set(echo = TRUE)
install.packages("zoo")
library(zoo)
window <- 4 #number of observation to average over
workingdata  <- data.frame(YawRateChange = rnorm(20, 0, 0.1), RMEAN = NA)
workingdata[1:(nrow(workingdata) - window + 1),]$RMEAN <-  rollmean(workingdata$YawRateChange, k=window)
View(workingdata)
